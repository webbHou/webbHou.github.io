<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大圣博客</title>
  <subtitle>&lt;img src=&quot;/logo.png&quot; style=&quot;width:50px;height:60px;&quot;&gt;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://webbHou.github.io/"/>
  <updated>2018-01-05T00:55:12.830Z</updated>
  <id>http://webbHou.github.io/</id>
  
  <author>
    <name>webbHou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017年度工作总结</title>
    <link href="http://webbHou.github.io/2018/01/04/2017/"/>
    <id>http://webbHou.github.io/2018/01/04/2017/</id>
    <published>2018-01-04T09:02:16.000Z</published>
    <updated>2018-01-05T00:55:12.830Z</updated>
    
    <content type="html"><![CDATA[<p>2017年是我人生中重要的转折点,完成了从学校到职场,从学生到员工的角色转变.来到公司的大半年里,从思想到心态上历经了一次全面的蜕变,学到了很多,也成长了很多.在此对我半年来的工作状况做一个小结:</p>
<p>1.学无止境 人生就是不断学习的过程，来到公司的这半年来，是我学到东西最多的几个月，从工作能力上到与人交流沟通都学到了好多。</p>
<ul>
<li>工作上我从只想认真做前端技术现在慢慢发展到明白了前后端之间的联系和耦合，对公司业务更加的熟悉，了解了各部门之间的工作关系，自己在公司的职责以及个人岗位的重要性。</li>
<li>人际交往中，慢慢的在学着如何更清楚的的与人交流，表达自己的看法，让别人更快地明白你的意图或疑惑，不仅加强了和同事之间的工作效率，更锻炼了自己的性格，前端本就是需要不断与人沟通的岗位，也为以后个人职业发展做好铺垫。</li>
</ul>
<p>2.即使是最基础的工作，也需要不断地创新求进，以提高工作效率</p>
<ul>
<li>变繁琐为简单 作为技术来说，我们不喜欢简单的粘贴复制，更不喜欢每天总是重复繁琐的工作，我们更喜欢用技术来改变这一切，这半年来我们在不断的改进，把每次的上下线活动变得简单，把每次活动的弹窗修改变为即使不懂代码也可以操作的可视化界面，这些改变是让人欣喜的，技术最怕的就是一成不变，那样终有一天会磨光仅有的那些对技术对代码的热爱。</li>
<li>更新迭代 来公司的半年里，我慢慢的了解了公司的技术栈，但发现大部分都是很老的，有很多需要改进，需要用新的更优秀的解决方案来代替，让用户体验更佳，让公司与外界保持同步，以此来吸引更多的优秀人才加入进来，公司才能更加壮大。基于这一点，每当我学习到新的技术，总是在想是否对现有的公司项目适用，让项目体验性更佳，带来更多的流量和用户，例如这半年里我使用了淘宝的flexable移动端适配插件让活动在移动端的显示更佳，更佳美观，用户体验性更好。</li>
</ul>
<p>2018年里，我希望能更加成熟和稳重，每一天做到认真和严谨，完成好每一项工作，不管它是否简单或复杂，学习更多的新技术，扎实基本功，更好的为公司服务。最后用自己最喜欢的一句话来结束，“以匠人之心，码出多彩人生！”</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年是我人生中重要的转折点,完成了从学校到职场,从学生到员工的角色转变.来到公司的大半年里,从思想到心态上历经了一次全面的蜕变,学到了很多,也成长了很多.在此对我半年来的工作状况做一个小结:&lt;/p&gt;
&lt;p&gt;1.学无止境 人生就是不断学习的过程，来到公司的这半年来，是我
    
    </summary>
    
      <category term="个人总结" scheme="http://webbHou.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="2017" scheme="http://webbHou.github.io/tags/2017/"/>
    
      <category term="总结" scheme="http://webbHou.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="http://webbHou.github.io/2017/12/20/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://webbHou.github.io/2017/12/20/前端性能优化/</id>
    <published>2017-12-20T02:23:51.000Z</published>
    <updated>2018-01-09T09:05:56.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h2><h4 id="合并请求"><a href="#合并请求" class="headerlink" title="合并请求"></a>合并请求</h4><p>合理的http/htpps请求会减少对后台服务器的压力,提升页面的性能.</p>
<h3 id="雪碧图"><a href="#雪碧图" class="headerlink" title="雪碧图"></a>雪碧图</h3><p>也相当于合并请求的一种,减少对图片的请求,尽量合并在一张大图进行请求</p>
<h3 id="合理利用插件库"><a href="#合理利用插件库" class="headerlink" title="合理利用插件库"></a>合理利用插件库</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前端性能优化&quot;&gt;&lt;a href=&quot;#前端性能优化&quot; class=&quot;headerlink&quot; title=&quot;前端性能优化&quot;&gt;&lt;/a&gt;前端性能优化&lt;/h2&gt;&lt;h4 id=&quot;合并请求&quot;&gt;&lt;a href=&quot;#合并请求&quot; class=&quot;headerlink&quot; title=&quot;合
    
    </summary>
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
      <category term="优化" scheme="http://webbHou.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>vue和react路由参数获取</title>
    <link href="http://webbHou.github.io/2017/11/17/vue%E5%92%8Creact%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96/"/>
    <id>http://webbHou.github.io/2017/11/17/vue和react路由参数获取/</id>
    <published>2017-11-17T03:30:20.000Z</published>
    <updated>2017-11-17T03:41:44.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue获取路由参数的方式"><a href="#vue获取路由参数的方式" class="headerlink" title="vue获取路由参数的方式"></a>vue获取路由参数的方式</h2><p>vue可以通过获取当前路由来获取,可以通过路由的监控触发事件来进行数据请求变更<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">this.<span class="variable">$route</span>.params</div><div class="line">watch:&#123;</div><div class="line">  //进行路由的监控触发事件</div><div class="line">  <span class="string">'$route'</span>: <span class="string">'事件名'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="react获取路由参数的方式"><a href="#react获取路由参数的方式" class="headerlink" title="react获取路由参数的方式"></a>react获取路由参数的方式</h2><p>react把路由参数作为prop进行传递,子组件只需要获取当前组件的props即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.props.params</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vue获取路由参数的方式&quot;&gt;&lt;a href=&quot;#vue获取路由参数的方式&quot; class=&quot;headerlink&quot; title=&quot;vue获取路由参数的方式&quot;&gt;&lt;/a&gt;vue获取路由参数的方式&lt;/h2&gt;&lt;p&gt;vue可以通过获取当前路由来获取,可以通过路由的监控触发事件
    
    </summary>
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
      <category term="vue-router" scheme="http://webbHou.github.io/tags/vue-router/"/>
    
      <category term="react-router" scheme="http://webbHou.github.io/tags/react-router/"/>
    
  </entry>
  
  <entry>
    <title>react初学总结</title>
    <link href="http://webbHou.github.io/2017/09/15/react%E5%88%9D%E5%AD%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://webbHou.github.io/2017/09/15/react初学总结/</id>
    <published>2017-09-15T07:04:31.000Z</published>
    <updated>2017-09-15T07:59:18.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react的特点"><a href="#react的特点" class="headerlink" title="react的特点"></a>react的特点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">声明式设计 −React采用声明范式，可以轻松描述应用。</div><div class="line">高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。性能更佳</div><div class="line">灵活 −React可以与已知的库或框架很好地配合。</div><div class="line">JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</div><div class="line">组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</div><div class="line">单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;react的特点&quot;&gt;&lt;a href=&quot;#react的特点&quot; class=&quot;headerlink&quot; title=&quot;react的特点&quot;&gt;&lt;/a&gt;react的特点&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
      <category term="react开发" scheme="http://webbHou.github.io/categories/react%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
      <category term="react redux" scheme="http://webbHou.github.io/tags/react-redux/"/>
    
  </entry>
  
  <entry>
    <title>小程序常用操作</title>
    <link href="http://webbHou.github.io/2017/09/13/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://webbHou.github.io/2017/09/13/小程序常用操作/</id>
    <published>2017-09-13T03:56:25.000Z</published>
    <updated>2017-09-13T08:16:03.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小程序业务常用操作"><a href="#小程序业务常用操作" class="headerlink" title="小程序业务常用操作"></a>小程序业务常用操作</h2><h3 id="上拉加载和下拉刷新"><a href="#上拉加载和下拉刷新" class="headerlink" title="上拉加载和下拉刷新:"></a>上拉加载和下拉刷新:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">方法一：onPullDownRefresh和onReachBottom方法实现小程序下拉加载和上拉刷新,在pages页xx.json设置<span class="string">"enablePullDownRefresh"</span>: <span class="string">"true"</span></div><div class="line">方法二：在scroll-view里设定bindscrolltoupper和bindscrolltolower实现微信小程序下拉,绑定自定义方法实现</div></pre></td></tr></table></figure>
<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>用于和对应的page中的方法绑定<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">方法一：<span class="built_in">bind</span>开头,例如: bindtab点击、bindtouchstart开始滑动、bindblur失去焦点、bindscrolltolower上滑加载</div><div class="line">方法二：catch开头, 例如: catchtab点击、catchblur</div></pre></td></tr></table></figure></p>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡。</p>
<h3 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wx.request 进行数据请求 参数:Object url:请求路径 method:请求类型 header:请求头 success:请求成功后回调 fail:失败后回调</div><div class="line">wx.previewImage 图片查看 参数:Object current:当前路径 urls:数组 路径列表</div><div class="line">wx.setNavigationBarTitle 设置页面标题 参数:Object title:页面标题</div><div class="line">wx.showNavigationBarLoading 显示正在加载 无实参</div><div class="line">wx.hideNavigationBarLoading 隐藏正在加载 无实参</div><div class="line">wx.stopPullDownRefresh 停止下拉刷新 无实参</div></pre></td></tr></table></figure>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>根目录中的.json文件为全局配置文件，定义应用的标题、背景等属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">page 数组 所有的页面必须在此声明</div><div class="line">window 数组 初始配置应用全局的标题、背景等属性,各页面可在后期开发中单独修改设置自己的页面属性</div><div class="line">tabBar Object 配置tab栏的标题、路由、icon，不多于五栏</div></pre></td></tr></table></figure></p>
<h4 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">onLaunch 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</div><div class="line">onShow 当小程序启动，或从后台进入前台显示，会触发 onShow</div><div class="line">onHide 当小程序从前台进入后台，会触发 onHide</div><div class="line">onReady 监听页面初次渲染完成</div><div class="line">onPullDownRefresh 监听用户下拉动作</div><div class="line">onUnload 监听页面卸载</div><div class="line">onShareAppMessage 页面分享方法</div></pre></td></tr></table></figure>
<h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const app = getApp() 获取全局应用程序实例对象</div><div class="line">各页面内适用cmd规范,require进行外部文件加载,import进行模板和样式的复用</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>小程序的数据绑定为伪数据绑定,自动与当前页面js中的date进行绑定.各种标签和方法都为内置和自定义,0基础比较容易上手开发.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小程序业务常用操作&quot;&gt;&lt;a href=&quot;#小程序业务常用操作&quot; class=&quot;headerlink&quot; title=&quot;小程序业务常用操作&quot;&gt;&lt;/a&gt;小程序业务常用操作&lt;/h2&gt;&lt;h3 id=&quot;上拉加载和下拉刷新&quot;&gt;&lt;a href=&quot;#上拉加载和下拉刷新&quot; class
    
    </summary>
    
      <category term="小程序" scheme="http://webbHou.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
      <category term="小程序" scheme="http://webbHou.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序页面跳转的方式</title>
    <link href="http://webbHou.github.io/2017/09/13/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://webbHou.github.io/2017/09/13/微信小程序页面跳转的方式/</id>
    <published>2017-09-13T02:09:28.000Z</published>
    <updated>2017-09-13T02:19:02.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="四种跳转方式"><a href="#四种跳转方式" class="headerlink" title="四种跳转方式"></a>四种跳转方式</h2><p>微信小程序页面跳转有四种方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wx.navigateTo(OBJECT)； </div><div class="line">wx.redirectTo(OBJECT)； </div><div class="line">wx.switchTab(OBJECT)； </div><div class="line">wx.navigateBack(OBJECT)</div></pre></td></tr></table></figure></p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">其中navigateTo是将原来的页面保存在页面栈中，在跳入到下一个页面的时候目标页面也进栈，只有在这个情况下点击手机的返回按钮才可以跳转到上一个页面；</div><div class="line">redirectTo和switchTab都是先清除栈中原来的页面，然后目标页面进栈，使用这两种跳转方式，都不能通过系统的返回键回到上一个页面，而是直接退出小程序；</div><div class="line">redirectTo使用的时候一定要配合tabBar或是页面里面可以再次跳转按钮，否则无法回到上一个页面；</div><div class="line">switchTab跳转的页面必须是tabBar中声明的页面；</div><div class="line">tabBar中定义的字段不能超过5个页面，小程序的页面栈层次也不能超过5层。</div><div class="line">navigateBack只能返回到页面栈中的指定页面，一般和navigateTo配合使用。</div><div class="line">wx.navigateTo 和 wx.redirectTo 不允许跳转到 tabbar 页面，只能用 wx.switchTab 跳转到 tabbar 页面</div></pre></td></tr></table></figure>
<h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><p>最后一种,使用<navigator>标签实现页面跳转:</navigator></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;navigator url=<span class="string">"navigate?title=navigate"</span> hover-class=<span class="string">"navigator-hover"</span>&gt;跳转到新页面&lt;/navigator&gt;</div><div class="line">&lt;navigator url=<span class="string">"redirect?title=redirect"</span> open-type=<span class="string">"redirect"</span> hover-class=<span class="string">"other-navigator-hover"</span>&gt;在当前页打开&lt;/navigator&gt;</div><div class="line">&lt;navigator url=<span class="string">"index"</span> open-type=<span class="string">"switchTab"</span> hover-class=<span class="string">"other-navigator-hover"</span>&gt;切换 Tab&lt;/navigator&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;四种跳转方式&quot;&gt;&lt;a href=&quot;#四种跳转方式&quot; class=&quot;headerlink&quot; title=&quot;四种跳转方式&quot;&gt;&lt;/a&gt;四种跳转方式&lt;/h2&gt;&lt;p&gt;微信小程序页面跳转有四种方式：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;tab
    
    </summary>
    
      <category term="微信小程序" scheme="http://webbHou.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
      <category term="小程序" scheme="http://webbHou.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>移动端返回上一页</title>
    <link href="http://webbHou.github.io/2017/08/31/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E9%A1%B5/"/>
    <id>http://webbHou.github.io/2017/08/31/移动端返回上一页/</id>
    <published>2017-08-31T05:24:19.000Z</published>
    <updated>2017-08-31T05:55:26.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移动端返回上一页问题"><a href="#移动端返回上一页问题" class="headerlink" title="移动端返回上一页问题"></a>移动端返回上一页问题</h2><p>实际工作中往往有这样的需求,需要返回上一页。</p>
<h3 id="pc"><a href="#pc" class="headerlink" title="pc"></a>pc</h3><p>在pc上我们可以使用window.history.go(-1)或者window.history.back()都可以实现需求,而无需知道上一页的具体url。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"javascript:history.go(-1)"</span> class=<span class="string">"header-back jsBack"</span>&gt;返回&lt;/a&gt;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"javascript:history.back()"</span> class=<span class="string">"header-back jsBack"</span>&gt;返回&lt;/a&gt;</div></pre></td></tr></table></figure>
<h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>但是在移动端，如果想要返回上一页。比如从A页面跳到B页面，如果B页面想返回A页面，为了防止不会跳错，必须要有一个 &lt;  按钮，给它加 history.go(-1) ，返回上一层。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"javascript:history.go(-1)"</span> class=<span class="string">"header-back jsBack"</span>&gt;返回&lt;/a&gt;</div></pre></td></tr></table></figure>
<p>但链接来源错综复杂，往往有些情况下根本没有上一页,这时候点击返回按钮根本没有用,用户体验性很差。很多时候会以为只是一个BUG。</p>
<p>移动端无论是原生app还是传统的网页，返回上页是一个比较强烈的需求。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javascript 有一个可以获取前一页面的URL地址的方法：document.referrer</div></pre></td></tr></table></figure>
<p>允许客户端通过document.referrer访问http头部来获取当前网页的来源。</p>
<p>根据document.referrer 的来源来判断是否有来源信息，如果来源信息为空，则返回首页：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (typeof document.referrer === <span class="string">''</span>) &#123;</div><div class="line">    // 没有来源页面信息的时候，改成首页URL地址</div><div class="line">    $(<span class="string">'.jsBack'</span>).attr(<span class="string">'href'</span>, <span class="string">'/'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以此来达到返回上一页的效果。</p>
<h3 id="无法获取referrer"><a href="#无法获取referrer" class="headerlink" title="无法获取referrer"></a>无法获取referrer</h3><p>下面的场景无法获得 referrer 信息，以下前8条属于【张鑫旭】：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">直接在浏览器中输入地址</div><div class="line">使用location.reload()刷新（location.href或者location.replace()刷新有信息）</div><div class="line">在微信对话框中，点击进入微信自身浏览器</div><div class="line">扫码进入微信或QQ的浏览器</div><div class="line">直接新窗口打开一个页面</div><div class="line">从https的网站直接进入一个http协议的网站（Chrome下亲测）</div><div class="line">a标签设置rel=<span class="string">"noreferrer"</span>（兼容IE7+）</div><div class="line">meta标签来控制不让浏览器发送referer</div><div class="line">点击 flash 内部链接</div><div class="line">Chrome4.0以下，IE 5.5+以下返回空的字符串</div><div class="line">使用 修改 Location 进行页面导航的方法，会导致在IE下丢失 referrer，这可能是IE的一个BUG</div><div class="line">跨域</div><div class="line">&lt;meta content=<span class="string">"never"</span> name=<span class="string">"referrer"</span>&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;移动端返回上一页问题&quot;&gt;&lt;a href=&quot;#移动端返回上一页问题&quot; class=&quot;headerlink&quot; title=&quot;移动端返回上一页问题&quot;&gt;&lt;/a&gt;移动端返回上一页问题&lt;/h2&gt;&lt;p&gt;实际工作中往往有这样的需求,需要返回上一页。&lt;/p&gt;
&lt;h3 id=&quot;pc&quot;
    
    </summary>
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
      <category term="移动端" scheme="http://webbHou.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://webbHou.github.io/2017/08/21/hello-world/"/>
    <id>http://webbHou.github.io/2017/08/21/hello-world/</id>
    <published>2017-08-21T10:07:00.455Z</published>
    <updated>2017-08-31T05:55:25.345Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="初始化" scheme="http://webbHou.github.io/categories/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://webbHou.github.io/tags/vue/"/>
    
      <category term="vuex" scheme="http://webbHou.github.io/tags/vuex/"/>
    
      <category term="hexo" scheme="http://webbHou.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
