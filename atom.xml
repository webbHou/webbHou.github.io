<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大圣博客</title>
  
  <subtitle>&lt;img src=&quot;/logo.png&quot; style=&quot;width:50px;height:60px;&quot;&gt;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://webbhou.github.io/"/>
  <updated>2025-04-08T06:14:49.333Z</updated>
  <id>http://webbhou.github.io/</id>
  
  <author>
    <name>webbHou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Long类型精度丢失问题原因及前端解决方案</title>
    <link href="http://webbhou.github.io/2023/04/14/Long%E7%B1%BB%E5%9E%8B%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0%E5%8F%8A%E5%89%8D%E7%AB%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://webbhou.github.io/2023/04/14/Long%E7%B1%BB%E5%9E%8B%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0%E5%8F%8A%E5%89%8D%E7%AB%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2023-04-14T06:30:21.000Z</published>
    <updated>2025-04-08T06:14:49.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="精度丢失原因"><a href="#精度丢失原因" class="headerlink" title="精度丢失原因"></a>精度丢失原因</h2><h3 id="JavaScript-中-Number-特性"><a href="#JavaScript-中-Number-特性" class="headerlink" title="JavaScript 中 Number 特性"></a>JavaScript 中 Number 特性</h3><p>JavaScript 中数字类型只有 Number 类型，不区分 int、long、double 等。根据（<a href="https://segmentfault.com/a/1190000008268668">IEEE 754 标准</a>）来表示实现它的 Number 类型。</p><h3 id="最大安全整数"><a href="#最大安全整数" class="headerlink" title="最大安全整数"></a>最大安全整数</h3><p>根据 IEEE 754 标准，其 16 进制形式为 0x001f_ffff_ffff_ffff ，即 9007199254740991。它等于 2 的 53 次方减 1，在 ES6 中，Number.MAX_SAFE_INTEGER 即为最大安全整数。</p><p>如果超过最大安全整数，则不能用数值传递，需要用其他数据类型，比如字符串，或拆分成两个数据字段。否则会出现精度丢失。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> === <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>; <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> === <span class="number">0x001f_ffff_ffff_ffff</span>; <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> === <span class="number">9007199254740991</span>; <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> === -<span class="title class_">Number</span>.<span class="property">MIN_SAFE_INTEGER</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="前端解决方案"><a href="#前端解决方案" class="headerlink" title="前端解决方案"></a>前端解决方案</h2><p><img src="/../image/long_big_number_1.png" alt="image-20230331143945484.png"><br>response 看到的其实是 JSON 字符串格式，也就是原始数据，是没问题的</p><p><img src="/../image/long_big_number_2.png" alt="image-20230331144008058.png"><br>而在 preview 中看到的其实是已经被 JSON.parse 后的数据，axios 默认会对 response 的数据进行 JSON.parse 处理成 JSON 对象。所以就可能出现精度丢失的问题。</p><p>所以解决的思路就是在<strong>response 数据传递前进行修改或转换</strong>。</p><h3 id="第三方包转换"><a href="#第三方包转换" class="headerlink" title="第三方包转换"></a>第三方包转换</h3><blockquote><p>json-bigint 会在把 json 字符串转 json 对象的过程中，自动识别大整数，把超出 JS 安全整数范围的数字转成一个类型为 BigNumber 的对象来表示，并以数组的格式保存，规避了精度丢失的问题。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">JSON</span>big <span class="keyword">from</span> <span class="string">&quot;json-bigint&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;&#123; &quot;id&quot;: 1253585734669959168 &#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(str).<span class="property">id</span>); <span class="comment">// 1253585734669959200</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>big.<span class="title function_">parse</span>(str).<span class="property">id</span>); <span class="comment">// BigNumber &#123;s: 1, e: 18, c: [12535, 85734669959168]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  BigNumber.toString() 就能得到原来正确的数据了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>big.<span class="title function_">parse</span>(str).<span class="property">id</span>.<span class="title function_">toString</span>()); <span class="comment">// 1253585734669959168</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在 axios 提供的 transformResponse 方法中对数据进行统一处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import JSONbig from &#x27;json-bigint&#x27;</span><br><span class="line"></span><br><span class="line">//这个方法的作用是在传递给then/catch前，允许修改响应数据</span><br><span class="line"></span><br><span class="line">//axios在这里默认把响应体从json字符串转成了js对象</span><br><span class="line">axios.defaults.transformResponse = [function (data) &#123;</span><br><span class="line">     try &#123;</span><br><span class="line">          return JSONbig.parse(data)</span><br><span class="line">     &#125;catch()&#123;</span><br><span class="line">         return data;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;]</span><br><span class="line">//如果不写这个方法，返回的数据是自动就转为json对象的了，如果写了，就要自己转为对象，即return JSON.parse(data)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;精度丢失原因&quot;&gt;&lt;a href=&quot;#精度丢失原因&quot; class=&quot;headerlink&quot; title=&quot;精度丢失原因&quot;&gt;&lt;/a&gt;精度丢失原因&lt;/h2&gt;&lt;h3 id=&quot;JavaScript-中-Number-特性&quot;&gt;&lt;a href=&quot;#JavaScript-中-Nu
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vue2项目自定义Prototype支持Ts类型升级</title>
    <link href="http://webbhou.github.io/2023/04/14/Vue2%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AE%9A%E4%B9%89Prototype%E6%94%AF%E6%8C%81Ts%E7%B1%BB%E5%9E%8B%E5%8D%87%E7%BA%A7/"/>
    <id>http://webbhou.github.io/2023/04/14/Vue2%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AE%9A%E4%B9%89Prototype%E6%94%AF%E6%8C%81Ts%E7%B1%BB%E5%9E%8B%E5%8D%87%E7%BA%A7/</id>
    <published>2023-04-14T06:19:41.000Z</published>
    <updated>2025-04-08T06:14:49.334Z</updated>
    
    <content type="html"><![CDATA[<p>升级参考分支 <strong>fe-shield-zeph: chore&#x2F;ts-upgrade</strong></p><h2 id="升级为-ts-项目及支持-jsx"><a href="#升级为-ts-项目及支持-jsx" class="headerlink" title="升级为 ts 项目及支持 jsx"></a>升级为 ts 项目及支持 jsx</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn add typescript ts-loader @vue/eslint-config-typescript -D <span class="comment">// 安装ts相关依赖</span></span><br><span class="line"></span><br><span class="line">yarn add @vue/babel-preset-jsx  -D <span class="comment">// 支持jsx语法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>tsconfig.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;preserve&quot;</span>,</span><br><span class="line"><span class="string">&quot;noImplicitThis&quot;</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure><p><img src="/../image/vue2_prototype_1.jpeg" alt="1680847055624.jpg"></p><p>.eslintrc.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;parser&quot;</span>: <span class="string">&quot;@typescript-eslint/parser&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/vue2_prototype_2.jpeg" alt="1680851574137.jpg"></p><p>babel.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;@vue/babel-preset-jsx&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/../image/vue2_prototype_3.jpeg" alt="1680870400800.jpg"></p><p>webpack.config.base.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;jsx&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.scss&#x27;</span>, <span class="string">&#x27;.css&#x27;</span>, <span class="string">&#x27;.less&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>]</span><br><span class="line"><span class="comment">// rules</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">   <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">   <span class="attr">options</span>: &#123;</span><br><span class="line">     <span class="attr">loaders</span>: &#123;</span><br><span class="line">        <span class="attr">ts</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">tsx</span>: <span class="string">&#x27;babel-loader!ts-loader&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">compilerOptions</span>: &#123;</span><br><span class="line">         <span class="attr">preserveWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">         <span class="attr">whitespace</span>: <span class="string">&#x27;condense&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span>, <span class="attr">options</span>: &#123; <span class="attr">appendTsxSuffixTo</span>: [<span class="regexp">/\.vue$/</span>] &#125; &#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.tsx$/</span>,</span><br><span class="line">  <span class="attr">use</span>: [</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">         <span class="attr">options</span>: &#123; <span class="attr">transpileOnly</span>: <span class="literal">true</span>, <span class="attr">appendTsxSuffixTo</span>: [<span class="regexp">/\.vue$/</span>] &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">   ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="/../image/vue2_prototype_4.jpeg" alt="1680847191316.jpg"><br><img src="/../image/vue2_prototype_5.jpeg" alt="1680847137896.jpg"></p><h2 id="项目改造"><a href="#项目改造" class="headerlink" title="项目改造"></a>项目改造</h2><p>store&#x2F;index.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const modulesFiles = require.context(&#x27;./modules&#x27;, true, /\.js$/);</span></span><br><span class="line"><span class="comment">// const modules = modulesFiles.keys().reduce((modules, modulePath) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     const moduleName = modulePath.replace(/^\.\/(.*)\.\w+$/, &#x27;$1&#x27;);</span></span><br><span class="line"><span class="comment">//     const value = modulesFiles(modulePath);</span></span><br><span class="line"><span class="comment">//     modules[moduleName] = value.default;</span></span><br><span class="line"><span class="comment">//     return modules;</span></span><br><span class="line"><span class="comment">// &#125;, &#123;&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// enum storeKey &#123;</span></span><br><span class="line"><span class="comment">//     state = &#x27;state&#x27;,</span></span><br><span class="line"><span class="comment">//     getters = &#x27;getters&#x27;,</span></span><br><span class="line"><span class="comment">//     mutations = &#x27;mutations&#x27;,</span></span><br><span class="line"><span class="comment">//     actions = &#x27;actions&#x27;,</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type Pick&lt;T, K extends keyof T, L extends storeKey&gt; = &#123;</span></span><br><span class="line"><span class="comment">//     [P in K]: T[P];</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type State = Pick&lt;typeof modules, keyof typeof modules, storeKey.state&gt;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type mutationType = Pick&lt;typeof modules, keyof typeof modules, storeKey.mutations&gt;;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/vue2_prototype_6.jpeg" alt="1680870187269.jpg"></p><p>main.js<br><img src="/../image/vue2_prototype_7.jpeg" alt="1680847948495.jpg"></p><h2 id="扩展-Vue-Types"><a href="#扩展-Vue-Types" class="headerlink" title="扩展 Vue Types"></a>扩展 Vue Types</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&#x27;@/custom/api&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constValue <span class="keyword">from</span> <span class="string">&#x27;@/custom/const-value&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    getTimestamp,</span><br><span class="line">    joinArray,</span><br><span class="line">    formatDate,</span><br><span class="line">    formatDate3,</span><br><span class="line">    formatDate4,</span><br><span class="line">    formatDate5,</span><br><span class="line">    formatValue,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;shield-common/src/modules/format-helper.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="title class_">Component</span>,</span><br><span class="line">    <span class="title class_">ThisTypedComponentOptionsWithRecordProps</span>,</span><br><span class="line">    <span class="title class_">ThisTypedComponentOptionsWithArrayProps</span>,</span><br><span class="line">    <span class="title class_">DefaultComputed</span>,</span><br><span class="line">    <span class="title class_">DefaultData</span>,</span><br><span class="line">    <span class="title class_">DefaultMethods</span>,</span><br><span class="line">    <span class="title class_">DefaultProps</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue/types/options&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ExtendedVue</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue/types/vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formatHelper = &#123;</span><br><span class="line">    getTimestamp,</span><br><span class="line">    joinArray,</span><br><span class="line">    formatDate,</span><br><span class="line">    formatDate3,</span><br><span class="line">    formatDate4,</span><br><span class="line">    formatDate5,</span><br><span class="line">    formatValue,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type <span class="variable constant_">API</span> = <span class="keyword">typeof</span> api;</span><br><span class="line"></span><br><span class="line"><span class="comment">// API添加ts 类型，可以在使用时进行提示</span></span><br><span class="line">type <span class="title class_">RecursiveObject</span>&lt;T&gt; = T <span class="keyword">extends</span> string ? never : T <span class="keyword">extends</span> object ? T : never;</span><br><span class="line">type <span class="title class_">Result</span>&lt;K&gt; = K <span class="keyword">extends</span> string ? string : &lt;T = any, U = any&gt;<span class="function">(<span class="params">param?: T, options?: any</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;U&gt;;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">APIValues</span>&lt;T, K = string&gt; = &#123;</span><br><span class="line">    [<span class="title class_">Key</span> <span class="keyword">in</span> keyof T]: T[<span class="title class_">Key</span>] <span class="keyword">extends</span> <span class="title class_">RecursiveObject</span>&lt;T[<span class="title class_">Key</span>]&gt; ? <span class="title class_">APIValues</span>&lt;T[<span class="title class_">Key</span>], number&gt; : <span class="title class_">Result</span>&lt;K&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Toast Type</span></span><br><span class="line">interface <span class="title class_">Toast</span> &#123;</span><br><span class="line">    <span class="title function_">success</span>(content?: string): <span class="keyword">void</span>;</span><br><span class="line">    <span class="title function_">warning</span>(content?: string): <span class="keyword">void</span>;</span><br><span class="line">    <span class="title function_">normal</span>(content?: string): <span class="keyword">void</span>;</span><br><span class="line">    <span class="title function_">error</span>(content?: string): <span class="keyword">void</span>;</span><br><span class="line">    <span class="title function_">loading</span>(content?: string): <span class="keyword">void</span>;</span><br><span class="line">    <span class="title function_">hide</span>(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Item</span> &#123;</span><br><span class="line">    readonly <span class="attr">value</span>: string | number;</span><br><span class="line">    readonly <span class="attr">label</span>: string;</span><br><span class="line">    readonly color?: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前项为any</span></span><br><span class="line">type <span class="title class_">RecursiveItem</span>&lt;T&gt; = T <span class="keyword">extends</span> string | number | object ? never : T;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">ConstValue</span>&lt;T&gt; = &#123;</span><br><span class="line">    [<span class="title class_">Key</span> <span class="keyword">in</span> keyof T]: T[<span class="title class_">Key</span>] <span class="keyword">extends</span> any[]</span><br><span class="line">        ? T[<span class="title class_">Key</span>][<span class="number">0</span>] <span class="keyword">extends</span> <span class="title class_">RecursiveItem</span>&lt;T[<span class="title class_">Key</span>][<span class="number">0</span>]&gt;</span><br><span class="line">            ? <span class="title class_">Item</span>[]</span><br><span class="line">            : T[<span class="title class_">Key</span>]</span><br><span class="line">        : T[<span class="title class_">Key</span>] <span class="title function_">extends</span> (...<span class="attr">args</span>: any) =&gt; any</span><br><span class="line">        ? <span class="function">(<span class="params">...args: Parameters&lt;T[Key]&gt;</span>) =&gt;</span> <span class="title class_">ReturnType</span>&lt;T[<span class="title class_">Key</span>]&gt;</span><br><span class="line">        : T[<span class="title class_">Key</span>] <span class="keyword">extends</span> <span class="title class_">RecursiveObject</span>&lt;T[<span class="title class_">Key</span>]&gt;</span><br><span class="line">        ? <span class="title class_">ConstValue</span>&lt;T[<span class="title class_">Key</span>]&gt;</span><br><span class="line">        : T[<span class="title class_">Key</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;vue/types/vue&#x27;</span> &#123;</span><br><span class="line">    <span class="comment">// 补充Vue Types</span></span><br><span class="line">    interface <span class="title class_">Vue</span> &#123;</span><br><span class="line">        <span class="attr">$ConstValue</span>: <span class="title class_">ConstValue</span>&lt;<span class="keyword">typeof</span> constValue&gt;;</span><br><span class="line">        <span class="attr">$Invoke</span>: <span class="title class_">APIValues</span>&lt;<span class="variable constant_">API</span>&gt;;</span><br><span class="line">        <span class="attr">$API</span>: <span class="title class_">APIValues</span>&lt;<span class="variable constant_">API</span>&gt;;</span><br><span class="line">        <span class="attr">$FormatHelper</span>: <span class="title class_">ConstValue</span>&lt;<span class="keyword">typeof</span> formatHelper&gt;;</span><br><span class="line">        <span class="attr">$toast</span>: <span class="title class_">Toast</span>;</span><br><span class="line">        [<span class="attr">string</span>: string]: any | (<span class="function">() =&gt;</span> <span class="keyword">void</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Options</span> = <span class="title class_">ThisTypedComponentOptionsWithRecordProps</span>&lt;</span><br><span class="line">    <span class="title class_">Vue</span>,</span><br><span class="line">    <span class="title class_">DefaultData</span>&lt;<span class="title class_">Vue</span>&gt;,</span><br><span class="line">    <span class="title class_">DefaultMethods</span>&lt;<span class="title class_">Vue</span>&gt;,</span><br><span class="line">    <span class="title class_">DefaultComputed</span>,</span><br><span class="line">    <span class="title class_">DefaultProps</span></span><br><span class="line">&gt;;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">ArrayPropsOptions</span> = <span class="title class_">ThisTypedComponentOptionsWithArrayProps</span>&lt;</span><br><span class="line">    <span class="title class_">Vue</span>,</span><br><span class="line">    <span class="title class_">DefaultData</span>&lt;<span class="title class_">Vue</span>&gt;,</span><br><span class="line">    <span class="title class_">DefaultMethods</span>&lt;<span class="title class_">Vue</span>&gt;,</span><br><span class="line">    <span class="title class_">DefaultComputed</span>,</span><br><span class="line">    string</span><br><span class="line">&gt;;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">ReturnOptions</span> = <span class="title class_">ExtendedVue</span>&lt;<span class="title class_">Vue</span>, <span class="title class_">DefaultData</span>&lt;<span class="title class_">Vue</span>&gt;, <span class="title class_">DefaultMethods</span>&lt;<span class="title class_">Vue</span>&gt;, <span class="title class_">DefaultComputed</span>, <span class="title class_">DefaultProps</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明全局类型</span></span><br><span class="line">declare <span class="variable language_">global</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Invoke</span>: <span class="title class_">APIValues</span>&lt;<span class="variable constant_">API</span>&gt;;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">API</span>: <span class="variable constant_">API</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">ExtendVue</span>: <span class="function">(<span class="params">options: Options | ArrayPropsOptions</span>) =&gt;</span> <span class="title class_">ReturnOptions</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">ConstValue</span>: <span class="title class_">ConstValue</span>&lt;<span class="keyword">typeof</span> constValue&gt;;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">FormatHelper</span>: <span class="title class_">ConstValue</span>&lt;<span class="keyword">typeof</span> formatHelper&gt;;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">VisibleHOC</span>: <span class="function">(<span class="params">Com: Component</span>) =&gt;</span> any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对Vue.extend封装成ExtendVue组件，全局使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ExtendVue</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123; ...options &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack.config.base.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ExtendVue</span>: [<span class="string">&#x27;@/../types/type.ts&#x27;</span>, <span class="string">&#x27;default&#x27;</span>],</span><br></pre></td></tr></table></figure><p><img src="/../image/vue2_prototype_8.jpeg" alt="1680848442521.jpg"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;tsx&quot;</span>&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ExtendVue</span>(&#123; <span class="comment">// 使用ExtendVue包裹</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/../image/vue2_prototype_9.jpeg" alt="1680849475055.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;升级参考分支 &lt;strong&gt;fe-shield-zeph: chore&amp;#x2F;ts-upgrade&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;升级为-ts-项目及支持-jsx&quot;&gt;&lt;a href=&quot;#升级为-ts-项目及支持-jsx&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>如何更新NPM依赖</title>
    <link href="http://webbhou.github.io/2022/12/21/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0NPM%E4%BE%9D%E8%B5%96/"/>
    <id>http://webbhou.github.io/2022/12/21/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0NPM%E4%BE%9D%E8%B5%96/</id>
    <published>2022-12-21T02:20:31.000Z</published>
    <updated>2025-04-08T06:14:49.341Z</updated>
    
    <content type="html"><![CDATA[<h4 id="npm-outdated"><a href="#npm-outdated" class="headerlink" title="npm outdated"></a>npm outdated</h4><p>npm 内置 该命令将检查每个已安装的依赖关系，并将当前版本与 npm registry 中的最新版本进行比较。它在终端打印出一个表格，概述了可用的版本。</p><ul><li>Current：是当前安装的版本。</li><li>Wanted：是根据 semver 范围内的软件包的最大版本。</li><li>Latest：是在 npm registry 中被标记为最新的软件包版本。</li></ul><p>npm update 命令会更新到 wanted 版本</p><h4 id="npm-check-updates"><a href="#npm-check-updates" class="headerlink" title="npm-check-updates"></a>npm-check-updates</h4><p>npm install -g npm-check-updates 全局安装</p><p>ncu 类似 npm outdated 会列出所有依赖可升级的版本 不同类型根据颜色标注</p><ul><li>Red （显示红色） &#x3D; major （主版本，或者说是大版本）</li><li>Cyan （显示青色） &#x3D; minor（次要版本）</li><li>Green（显示绿色） &#x3D; patch （补丁版本）</li></ul><p>ncu –target [patch, minor, latest, newest, greatest] 指定不同类型进行升级</p><p>ncu –interactive 自定义选择升级<br>ncu –interactive –format group 根据类型分组列出 进行选择升级</p><h4 id="npm-安装本地或私有-git-源包"><a href="#npm-安装本地或私有-git-源包" class="headerlink" title="npm 安装本地或私有 git 源包"></a>npm 安装本地或私有 git 源包</h4><ul><li>安装本地包 file 协议 yarn add file:.&#x2F;config 更新 或 yarn install</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;config&quot;</span>: <span class="string">&quot;file:./config&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>安装私有 git 源 yarn upgrade yii-es6-amd 更新 或 yarn install</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;yii-es6-amd&quot;</span>: <span class="string">&quot;git+https://git@github.com/yiifaa/yii-es6-amd.git&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-npm-link-引入本地-npm-模块进行调试"><a href="#使用-npm-link-引入本地-npm-模块进行调试" class="headerlink" title="使用 npm link 引入本地 npm 模块进行调试"></a>使用 npm link 引入本地 npm 模块进行调试</h4><ul><li>当项目和模块在 相同 目录下，可以使用相对路径，只需 link 一次</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link ../xx-<span class="variable language_">module</span></span><br></pre></td></tr></table></figure><ul><li>当项目和模块在 不同 目录下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xx-module为文件名</span></span><br><span class="line">cd ../xx-<span class="variable language_">module</span></span><br><span class="line">npm link</span><br><span class="line"></span><br><span class="line">cd your-project</span><br><span class="line">npm link your-ui-lib <span class="comment">// your-ui-lib 为模块名</span></span><br></pre></td></tr></table></figure><h4 id="npm发布如何只发布打包文件"><a href="#npm发布如何只发布打包文件" class="headerlink" title="npm发布如何只发布打包文件"></a>npm发布如何只发布打包文件</h4><ul><li><p>白名单<br>在package指定files字段，列出要包含在发布包中的文件和目录(package.json、README.md、LICENSE 和 main 字段指向的文件默认会被包含)</p></li><li><p>黑名单<br>新建.npmignore文件，在文件中列出要忽略的文件和目录，如果有.gitignore，npm 默认会使用 .gitignore。当发布的内容与 Git 忽略的内容不同，必须显式创建.npmignore文件。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;npm-outdated&quot;&gt;&lt;a href=&quot;#npm-outdated&quot; class=&quot;headerlink&quot; title=&quot;npm outdated&quot;&gt;&lt;/a&gt;npm outdated&lt;/h4&gt;&lt;p&gt;npm 内置 该命令将检查每个已安装的依赖关系，并将当前版本
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="NPM" scheme="http://webbHou.github.io/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>js项目升级为ts</title>
    <link href="http://webbhou.github.io/2022/11/02/js%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7%E4%B8%BAts/"/>
    <id>http://webbhou.github.io/2022/11/02/js%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7%E4%B8%BAts/</id>
    <published>2022-11-02T10:24:36.000Z</published>
    <updated>2025-04-08T06:14:49.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、下载包"><a href="#1、下载包" class="headerlink" title="1、下载包"></a>1、下载包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D typescript@babel/preset-typescript@types/react</span><br></pre></td></tr></table></figure><h3 id="2、修改文件"><a href="#2、修改文件" class="headerlink" title="2、修改文件"></a>2、修改文件</h3><p><strong>2.1、webpack.common.js</strong></p><blockquote><p>增加.ts 和.tsx</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">+  extensions: [\&#x27;.js\&#x27;, \&#x27;.jsx\&#x27;, \&#x27;.ts\&#x27;, \&#x27;.tsx\&#x27;, \&#x27;.json\&#x27;, \&#x27;css\&#x27;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.2、删除 jsconfig.json，增加 tsconfig.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 支持类型不标注可以默认any</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/components/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./components/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/components&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./components&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/js/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./js/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/hooks/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./hooks/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./hooks&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/src/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/src&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>2.3、babel.config.js</strong></p><blockquote><p>babel 预设中增加@babel&#x2F;preset-typescript&#96;&#96;&#96;base<br>presets: [<br>[</p></blockquote><pre><code>&quot;@babel/preset-env&quot;,&#123;  corejs: 3,  modules: false,  loose: true,  useBuiltIns: &quot;entry&quot;,&#125;</code></pre><p>],<br>“@babel&#x2F;preset-react”,</p><ul><li>“@babel&#x2F;preset-typescript”<br>],</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**2.4、eslintrc.js**</span><br><span class="line"></span><br><span class="line">&gt; 增加@typescript-eslint</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">&quot;plugins&quot;: [</span><br><span class="line">  &quot;react&quot;,</span><br><span class="line">+  &quot;@typescript-eslint&quot;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="3、新增文件"><a href="#3、新增文件" class="headerlink" title="3、新增文件"></a>3、新增文件</h3><p><strong>3.1、type.ts</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&quot;./custom/api&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DZMessage</span> <span class="keyword">as</span> dzMessage &#125; <span class="keyword">from</span> <span class="string">&quot;./js/utils/antd-helper&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> type &#123; <span class="title class_">History</span> &#125; <span class="keyword">from</span> <span class="string">&quot;history&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constValue <span class="keyword">from</span> <span class="string">&quot;./js/config/const-value&quot;</span>;</span><br><span class="line"></span><br><span class="line">type <span class="variable constant_">API</span> = <span class="keyword">typeof</span> api;</span><br><span class="line">type <span class="title class_">DZMessage</span> = <span class="keyword">typeof</span> dzMessage;</span><br><span class="line">type <span class="title class_">ConstValue</span> = <span class="keyword">typeof</span> constValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加ts 类型，可以在使用时进行提示</span></span><br><span class="line">type <span class="title class_">RecursiveObject</span>&lt;T&gt; = T <span class="keyword">extends</span> string ? <span class="attr">never</span>: T <span class="keyword">extends</span> object? T : never;</span><br><span class="line">type <span class="title class_">Result</span>&lt;K&gt; = K <span class="keyword">extends</span> string ? string : &lt;T = any, U = any&gt;<span class="function">(<span class="params">param?: T, options?: any</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;U&gt;</span><br><span class="line">type <span class="title class_">APIValues</span>&lt;T, K = string&gt; = &#123;</span><br><span class="line">    [<span class="title class_">Key</span> <span class="keyword">in</span> keyof T]: T[<span class="title class_">Key</span>] <span class="keyword">extends</span> <span class="title class_">RecursiveObject</span>&lt;T[<span class="title class_">Key</span>]&gt; ? <span class="title class_">APIValues</span>&lt;T[<span class="title class_">Key</span>], number&gt; : <span class="title class_">Result</span>&lt;K&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">declare <span class="variable language_">global</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Invoke</span>: <span class="title class_">APIValues</span>&lt;<span class="variable constant_">API</span>&gt;;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">API</span>: <span class="variable constant_">API</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">DZMessage</span>: <span class="title class_">DZMessage</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">DZHistory</span>: <span class="title class_">History</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">ConstValue</span>: <span class="title class_">ConstValue</span>;</span><br><span class="line">    namespace <span class="title class_">React</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2、global-d-ts"><a href="#3-2、global-d-ts" class="headerlink" title="3.2、global.d.ts"></a>3.2、global.d.ts</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="variable language_">module</span> \<span class="string">&#x27;*.css\&#x27;</span></span><br><span class="line"><span class="string">declare module \&#x27;*.scss\&#x27;</span></span><br><span class="line"><span class="string">declare module \&#x27;*.less\&#x27;</span></span><br><span class="line"><span class="string">declare module \&#x27;*.json\&#x27;</span></span><br><span class="line"><span class="string">declare module \&#x27;*.jpg\&#x27;</span></span><br><span class="line"><span class="string">declare module \&#x27;*.jpge\&#x27;</span></span><br><span class="line"><span class="string">declare module \&#x27;*.png\&#x27;</span></span><br><span class="line"><span class="string">declare module \&#x27;*.gif\&#x27;</span></span><br><span class="line"><span class="string">declare module \&#x27;*.svg\&#x27;</span></span><br><span class="line"><span class="string">declare module \&#x27;*.bmp\&#x27;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、下载包&quot;&gt;&lt;a href=&quot;#1、下载包&quot; class=&quot;headerlink&quot; title=&quot;1、下载包&quot;&gt;&lt;/a&gt;1、下载包&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="typescript" scheme="http://webbHou.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>移动端底部按钮兼容处理</title>
    <link href="http://webbhou.github.io/2022/11/02/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BA%95%E9%83%A8%E6%8C%89%E9%92%AE%E5%85%BC%E5%AE%B9%E5%A4%84%E7%90%86/"/>
    <id>http://webbhou.github.io/2022/11/02/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BA%95%E9%83%A8%E6%8C%89%E9%92%AE%E5%85%BC%E5%AE%B9%E5%A4%84%E7%90%86/</id>
    <published>2022-11-02T10:23:27.000Z</published>
    <updated>2025-04-08T06:14:49.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="底部按钮固定"><a href="#底部按钮固定" class="headerlink" title="底部按钮固定"></a>底部按钮固定</h2><p><img src="/../image/h5_bottom_1.jpeg" alt="81591779441_.pic.jpg"><br><strong>不使用定位方案</strong></p><p>使用 css3 <strong>calc</strong> 计算函数配合 <strong>vh</strong>单位实现。 在移动端兼容良好, 并且 h5 页面基本都是嵌套在微信、公司的 app。完全可用。</p><h3 id="calc-css3-计算函数-height"><a href="#calc-css3-计算函数-height" class="headerlink" title="calc css3 计算函数 height"></a>calc css3 计算函数 height</h3><p><img src="/../image/h5_bottom_2.png" alt="WeChatc6d7f31e36846bcb5d41c31398975703.png"><br><img src="/../image/h5_bottom_3.png" alt="WeChat9e8539f63534441fdfd919c9eb46af5e.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>滚动区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btns&quot;</span>&gt;</span>底部按钮<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btns</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">    -webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="弹窗表单"><a href="#弹窗表单" class="headerlink" title="弹窗表单"></a>弹窗表单</h2><p><img src="/../image/h5_bottom_4.jpeg" alt="71591779286_.pic_hd.jpg"></p><h3 id="会出现的几种问题"><a href="#会出现的几种问题" class="headerlink" title="会出现的几种问题"></a>会出现的几种问题</h3><ul><li>IOS 键盘弹出后，会把固定定位表现为绝对定位，会出现很多意外情况。在开发中尽量使用绝对定位来替代固定定位。</li><li>手在屏幕上滚动时会发生事件穿透。需要使用 js 阻止事件穿透带来的影响。</li><li>在 IOS 屏幕被挤上去后，键盘消失时会发生页面无法下来导致出现键盘大小的空白。需要在失去焦点时让出现滚动的元素向上或者向下滚动 1 像素即可。或者当键盘弹起时给 body 添加 <code> overfilow: hidden;</code> ,键盘消失后移除。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;scrollTop&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.modal</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.modal</span> <span class="selector-class">.mask</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.modal</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">closest</span>(<span class="params">el, selector</span>) &#123;  <span class="comment">// 定位父级元素</span></span><br><span class="line">  <span class="keyword">const</span> matchesSelector = el.<span class="property">matches</span> || el.<span class="property">webkitMatchesSelector</span> || el.<span class="property">mozMatchesSelector</span> || el.<span class="property">msMatchesSelector</span>;</span><br><span class="line">  <span class="keyword">while</span> (el) &#123;</span><br><span class="line">    <span class="keyword">if</span> (matchesSelector.<span class="title function_">call</span>(el, selector)) &#123;</span><br><span class="line">      <span class="keyword">return</span> el;</span><br><span class="line">    &#125;</span><br><span class="line">    el = el.<span class="property">parentElement</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onWrapTouchStart = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;  <span class="comment">// 处理弹窗的事件穿透问题</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/iPhone|iPod|iPad/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> pNode = <span class="title function_">closest</span>(e.<span class="property">target</span>, \<span class="string">&#x27;.content\&#x27;);  // 根据需要处理 .content 下面所有元素的穿透</span></span><br><span class="line"><span class="string">  if (!pNode) &#123;</span></span><br><span class="line"><span class="string">    e.preventDefault();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">scrollTop = () =&gt; &#123;  // 一屏页面只需要滚动到顶部就可以让ios出现的白条消失</span></span><br><span class="line"><span class="string">   document.documentElement.scrollTop = 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;底部按钮固定&quot;&gt;&lt;a href=&quot;#底部按钮固定&quot; class=&quot;headerlink&quot; title=&quot;底部按钮固定&quot;&gt;&lt;/a&gt;底部按钮固定&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/../image/h5_bottom_1.jpeg&quot; alt=&quot;81591779441
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>SSR开发注意事项</title>
    <link href="http://webbhou.github.io/2022/11/02/SSR%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://webbhou.github.io/2022/11/02/SSR%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2022-11-02T10:21:22.000Z</published>
    <updated>2025-04-08T06:14:49.334Z</updated>
    
    <content type="html"><![CDATA[<h4 id="开发注意事项"><a href="#开发注意事项" class="headerlink" title="开发注意事项"></a>开发注意事项</h4><h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><p>&#x3D;&#x3D;如果是 SSR 下就取页面的数据<br>context.state.home.newsList<br>否则从 state 取&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const mapStateToProps = state =&gt; (&#123;</span><br><span class="line">    list: webConfig.SSR?context.state.home.newsList:state.home.newsList,</span><br><span class="line">    details: state.home.details,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Node-渲染数据"><a href="#Node-渲染数据" class="headerlink" title="Node 渲染数据"></a>Node 渲染数据</h4><p>&#x3D;&#x3D;把需要渲染的方法防盗 loadData 里面即可&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exportHome.loadData = (store) =&gt; &#123;</span><br><span class="line">   return store.dispatch(actions.getHomeList())</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="如果要同事请求多个接口：（建议最好请求一个需要-SSR-的接口）"><a href="#如果要同事请求多个接口：（建议最好请求一个需要-SSR-的接口）" class="headerlink" title="如果要同事请求多个接口：（建议最好请求一个需要 SSR 的接口）"></a>如果要同事请求多个接口：（建议最好请求一个需要 SSR 的接口）</h5><p>let fun&#x3D;[store.dispatch(actions.getHomeList()),store.dispatch(actions.getDetails())]</p><h4 id="关于项目配置"><a href="#关于项目配置" class="headerlink" title="关于项目配置"></a>关于项目配置</h4><p>文件路径：<br>&#x3D;&#x3D;src&#x2F;web.config.js&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//测试+预发（当前后端不在一台服务器时候）</span><br><span class="line">if(process.env.npm_config_argv &amp;&amp; (process.env.BUILD_ENV==&quot;PRE&quot; ||process.env.BUILD_ENV==&quot;TEST&quot;))&#123;</span><br><span class="line">    let npm_config_argv=JSON.parse(process.env.npm_config_argv)</span><br><span class="line">    let serverName = npm_config_argv.cooked[2]</span><br><span class="line">    if(serverName==&quot;--webtest1&quot;)&#123;</span><br><span class="line">        host=&quot;http://my-webtest.hou.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    if(serverName==&quot;--webtest2&quot;)&#123;</span><br><span class="line">        host=&quot;http://my-webtest1.hou.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    if(serverName==&quot;--webpre1&quot;)&#123;</span><br><span class="line">        host=&quot;http://api.hou-inc.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    if(serverName==&quot;--webpre2&quot;)&#123;</span><br><span class="line">        host=&quot;http://pre2-www.hou.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const webConfig=&#123;</span><br><span class="line">    &quot;build&quot;:&quot;job-wiki&quot;,  //项目别名</span><br><span class="line">    &quot;port&quot;:3001,         //项目端口</span><br><span class="line">    &quot;SSR&quot;:process.env.SSR_ENV==&quot;true&quot;,</span><br><span class="line">    &quot;development&quot;:&#123;</span><br><span class="line">        host:&quot;/&quot;,</span><br><span class="line">        path:&quot;/api/&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;production&quot;:&#123;</span><br><span class="line">        host:host,</span><br><span class="line">        path:&quot;/mock/365/&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：该方案合适前后端不在同一个域名情况<br>同意域名 host:”&#x2F;“,<br>path:”&#x2F;mock&#x2F;365&#x2F;“ &#x3D;&#x3D;设置接口路径，根据实际情况配置&#x3D;&#x3D;</p><h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><p>scripts&#x2F;webpack.utils.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const webConfig=&#123;</span><br><span class="line">    &quot;build&quot;:&quot;job-wiki&quot;, //项目别名</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自动转 REM(适合移动站)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">          require(\&#x27;precss\&#x27;),</span><br><span class="line">          // require(\&#x27;postcss-pxtorem\&#x27;)(&#123;</span><br><span class="line">          //     rootValue: 20,</span><br><span class="line">          //     unitPrecision: 5,</span><br><span class="line">          //     propList: [\&#x27;width\&#x27;, \&#x27;height\&#x27;, \&#x27;line-height\&#x27;, \&#x27;letter-spacing\&#x27;, \&#x27;font*\&#x27;, \&#x27;background*\&#x27;, \&#x27;margin*\&#x27;, \&#x27;padding*\&#x27;],</span><br><span class="line">          //     selectorBlackList: [],</span><br><span class="line">          //     replace: true,</span><br><span class="line">          //     mediaQuery: false,</span><br><span class="line">          //     minPixelValue: 0</span><br><span class="line">          // &#125;)</span><br><span class="line">      ],</span><br></pre></td></tr></table></figure><p>异步请求多个接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">getHomeList: (data) =&gt; async (dispatch, getState, Invoke) =&gt; &#123;</span><br><span class="line">     await Axios.all([</span><br><span class="line">         Invoke.home.news(&#123;&#125;, &quot;GET&quot;, &quot;json&quot;),</span><br><span class="line">         Invoke.home.details(&#123;&#125;, &quot;GET&quot;, &quot;json&quot;)</span><br><span class="line">     ])</span><br><span class="line">      .then(Axios.spread(function (userResp, reposResp) &#123;</span><br><span class="line">             // 上面两个请求都完成后，才执行这个回调方法</span><br><span class="line">             const list = userResp.data.data</span><br><span class="line">             if (userResp.data.rescode == 0) &#123;</span><br><span class="line">                 dispatch(actions.setHomeList(list))</span><br><span class="line">             &#125;</span><br><span class="line">             const data = reposResp.data</span><br><span class="line">             if (data.rescode == 0) &#123;</span><br><span class="line">                 dispatch(actions.setDetails(data))</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;))</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意：一定要先判断 rescode 的状态再 dispatch 否则页面会挂掉&#x3D;&#x3D;</p><p>页面链接跳转不准用 Link 全部换成 A 标签</p><h4 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h4><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run test --webtest1</span><br><span class="line">npm run test --webtest2</span><br></pre></td></tr></table></figure><p>预发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run pre --webpre1</span><br><span class="line">npm run pre --webpre2</span><br></pre></td></tr></table></figure><p>生产</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h4 id="两个全局变量注意用法"><a href="#两个全局变量注意用法" class="headerlink" title="两个全局变量注意用法"></a>两个全局变量注意用法</h4><p>clientRender：是要用 npm start 开发模式用</p><p>条件内的代码打包后不会生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(clientRender)&#123;</span><br><span class="line">     let &#123;getHomeList&#125; =this.props</span><br><span class="line">      getHomeList()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>serverRender</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(serverRender)&#123;</span><br><span class="line">    //打包后会生效</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SSR 模式开发（npm run dev）</p><p>缺点：静态资源实施编译，服务端渲编译慢，需要主动刷新页面才能看到效果</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;开发注意事项&quot;&gt;&lt;a href=&quot;#开发注意事项&quot; class=&quot;headerlink&quot; title=&quot;开发注意事项&quot;&gt;&lt;/a&gt;开发注意事项&lt;/h4&gt;&lt;h4 id=&quot;数据处理&quot;&gt;&lt;a href=&quot;#数据处理&quot; class=&quot;headerlink&quot; title=&quot;数
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>团队代码风格统一</title>
    <link href="http://webbhou.github.io/2022/11/02/%E5%9B%A2%E9%98%9F%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%BB%9F%E4%B8%80/"/>
    <id>http://webbhou.github.io/2022/11/02/%E5%9B%A2%E9%98%9F%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%BB%9F%E4%B8%80/</id>
    <published>2022-11-02T10:19:40.000Z</published>
    <updated>2025-04-08T06:14:49.340Z</updated>
    
    <content type="html"><![CDATA[<p>说明示例项目为看准的 kz-web-dev&#x2F;react-web</p><h1 id="如何改造项目"><a href="#如何改造项目" class="headerlink" title="如何改造项目"></a>如何改造项目</h1><h2 id="eslint-prettier-格式化和规范代码"><a href="#eslint-prettier-格式化和规范代码" class="headerlink" title="eslint+prettier 格式化和规范代码"></a>eslint+prettier 格式化和规范代码</h2><h3 id="1-安装-npm-包"><a href="#1-安装-npm-包" class="headerlink" title="1.安装 npm 包"></a>1.安装 npm 包</h3><p>首先安装<code>eslint</code>+<code>prettier</code>+<code>eslint-webpack-plugin</code></p><p><code>cnpm install eslint  prettier eslint-webpack-plugin@2.x -D</code></p><blockquote><p>因为<code>eslint</code>和<code>prettier</code>一起使用可能会冲突所以还需要安装下方两个包，webpack4 请安<br>装<a href="mailto:&#101;&#x73;&#108;&#105;&#x6e;&#116;&#x2d;&#x77;&#101;&#x62;&#112;&#x61;&#99;&#x6b;&#x2d;&#112;&#108;&#117;&#x67;&#x69;&#x6e;&#64;&#50;&#x2e;&#120;">eslint-webpack-plugin@2.x</a></p></blockquote><p>安装<code>eslint-config-prettier</code>和<code>eslint-plugin-prettier</code>来配合使用</p><p><code>cnpm install eslint-plugin-prettier  eslint-config-prettier -D</code></p><blockquote><p>请注意，有可能在 eslint 的<code>rules</code>里配置的会跟<code>prettier</code>有冲突，所以可以用 cli 工具检查一下，把相应<br>的规则更改或者删掉。<a href="https://github.com/prettier/eslint-config-prettier#cli-helper-tool">点这里</a></p></blockquote><blockquote><p>有一些 eslint-config-prettier 禁用的规则实际上可以在某些情况下启用。请参考这<br>里<a href="https://github.com/prettier/eslint-config-prettier#special-rules">special-rules</a></p></blockquote><h3 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2.修改配置"></a>2.修改配置</h3><p>在根目录添加文件</p><ul><li><p><code>.eslintignore</code></p><ul><li>用来忽略不需要格式化的文件，之后会用到这个文件夹</li></ul></li><li><p><code>.eslintrc.js</code></p><ul><li>用来写入<code>eslint</code>的具体<code>rules</code>和引入<code>extends</code>和<code>plugins</code>，具体请参考项目根目录下的该文件</li></ul></li><li><p><code>.prettierrc.js</code></p><ul><li>用来写入<code>prettier</code>的具体<code>rules</code>，具体请参考项目根目录下的该文件</li></ul></li></ul><p>更改 webpack 配置，添加<code>eslint-webpack-plugin</code>，具体参考<code>webpack.common.js</code>,如果项目之前用<br>着<code>eslint-loader</code>，需要删除不用，作者已经不在更新，推荐使用<code>eslint-webpack-plugin</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintPlugin</span> = <span class="built_in">require</span>(\<span class="string">&#x27;eslint-webpack-plugin\&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">plugins: [</span></span><br><span class="line"><span class="string">    new ESLintPlugin(&#123;</span></span><br><span class="line"><span class="string">        // 注意 这块需要context 到你的eslint 配置文件所在目录，因为webpack配置文件在scripts/ 所以需要../</span></span><br><span class="line"><span class="string">        context: \&#x27;../\&#x27;,</span></span><br><span class="line"><span class="string">        emitError: true,</span></span><br><span class="line"><span class="string">        emitWarning: true,</span></span><br><span class="line"><span class="string">        failOnError: true,</span></span><br><span class="line"><span class="string">        extensions: [\&#x27;ts\&#x27;, \&#x27;tsx\&#x27;, \&#x27;js\&#x27;, \&#x27;jsx\&#x27;],</span></span><br><span class="line"><span class="string">    &#125;),</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="3-添加-airbnb-的配置"><a href="#3-添加-airbnb-的配置" class="headerlink" title="3.添加 airbnb 的配置"></a>3.添加 airbnb 的配置</h3><p>eslint 配置太多，一个个配置太过于麻烦，所以采用的业内最多人使用的<code>eslint-config-airbnb</code>配置，这个配<br>置包需要很多前置 npm 包，<a href="https://www.npmjs.com/package/eslint-config-airbnb">点这里</a>去查看安转前置<br>包，使用方式就是在<code>.eslintrc.js</code>的<code>extends</code> 添加配置，具体请看<code>.eslintrc.js</code> 文件，已经是配置完成的<br>状态，因为里面会有很多配置比较严格或者不符合目前团队开发习惯的，可以在下方<code>rules</code>去覆盖相应配置</p><p><code>cnpm install eslint-config-airbnb -D</code></p><figure class="highlight javascript"><figcaption><span>extends: ['airbnb', 'airbnb/hooks', 'plugin:prettier/recommended'],</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-vscode-添加插件"><a href="#4-vscode-添加插件" class="headerlink" title="4.vscode 添加插件"></a>4.vscode 添加插件</h3><p>在 vscode 中下载<code>eslint</code>和<code>prettier</code>插件，然后在工作区添加<code>setting.josn</code>，添加配置,</p><p>建议在工作区添加配置，而不是在用户添加配置，这样可以在项目目录下生成一个<code>.vscode</code>文件，<strong>下方图片蓝<br>色框框</strong>里面的<code>setting.json</code>就是刚才添加的配置，并且把这个文件提交 git，保持整个团队风格统一，并且只<br>需要配置一次，也不会因为不同团队成员的不同 vscode 本地配置而导致格式化风格不统一</p><p><img src="/../image/engineering_1.png" alt="图片1"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[scss]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[less]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[css]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[markdown]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnPaste&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.alwaysShowStatus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prettier.printWidth&quot;</span><span class="punctuation">:</span> <span class="number">120</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="husky-lint-staged-来规范提交"><a href="#husky-lint-staged-来规范提交" class="headerlink" title="husky+lint-staged 来规范提交"></a>husky+lint-staged 来规范提交</h2><h3 id="1-安装-npm-包-1"><a href="#1-安装-npm-包-1" class="headerlink" title="1.安装 npm 包"></a>1.安装 npm 包</h3><p>首先安装<code>husky</code>+<code>lint-staged</code></p><p><code>cnpm install husky lint-staged@11.x -D</code></p><blockquote><p>注意 node 版本和<code>lint-staged</code>版本的关系，可以参<br>考<a href="https://www.npmjs.com/package/lint-staged/v/11.2.6">lint-staged</a>里的 Changelog，本次 node 版本<br>v12.16.3 安装的<a href="mailto:&#108;&#105;&#110;&#x74;&#x2d;&#x73;&#x74;&#x61;&#x67;&#x65;&#100;&#x40;&#x31;&#x31;&#46;&#120;">lint-staged@11.x</a></p></blockquote><h3 id="2-增加配置"><a href="#2-增加配置" class="headerlink" title="2.增加配置"></a>2.增加配置</h3><p>首先需要初始化<code>husky</code>，来生成脚本，在<code>package.json</code>的<code>scripts</code>里添加命<br>令<code> &quot;prepare&quot;: &quot;husky install&quot;,</code>，来初始化生成脚本，并且添加”lint-staged”字段来配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd .. &amp;&amp; husky install react-web/.husky&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;js,jsx,ts,tsx&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;npm run checkFileIgnore&quot;</span><span class="punctuation">,</span> <span class="string">&quot;eslint --color&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>执行脚本 <code>npm run prepare</code></p><p>然后添加钩子 <code>npx husky add .husky/pre-commit &quot;npx lint-staged&quot;</code>，</p><blockquote><p>注意，如果你的项目类似于 kz-web-dev 这种的，一个 git 里多个项目，husky 需要更改一<br>下<a href="https://typicode.github.io/husky/#/?id=custom-directory">参考这里</a>或者可以看该项目的相关配置，<br>就是这种情况</p></blockquote><p>操作完成之后，会在你的<code>package.json</code>目录下生成一个<code>.husky</code>,里面会有一个<code>pre-commit</code>shell 脚本（上方图片红框），脚本<br>内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class="line"></span><br><span class="line">cd react-web #这行是手动添加的</span><br><span class="line">npx lint-staged -v --no-stash  # 这个命令可以自己去修改添加对应的参数 --no-stash 是执行多个lint-staged命令时，有错误不会滚到最初</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时 git 提交代码时，会走 lint-staged 相应的配置命令，实现代码检查等等之类的功能</p><h3 id="3-老项目适配"><a href="#3-老项目适配" class="headerlink" title="3.老项目适配"></a>3.老项目适配</h3><p>如果是一个新项目，都是新文件，可以按照上述配置来修改，但是如果是老项目的话，可能很多文件都不是很符合<br>现在的代码要求，就会导致，eslint 校验一直过不去，导致开发的时候一直报错，git 提交提交代码页提交不上<br>去，所以进行以下修改</p><p>编写 node 脚本在项目根目录下执行，将目前所有的老文件 js 添加到<code>.eslintignore</code>到中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(\<span class="string">&#x27;fs\&#x27;)</span></span><br><span class="line"><span class="string">const path = require(\&#x27;path\&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const tarPath = path.join(__dirname, \&#x27;.eslintignore\&#x27;)</span></span><br><span class="line"><span class="string">// const eslintignore = fs.readFileSync(tarPath, \&#x27;utf-8\&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// const root = path.resolve(\&#x27;./assets\&#x27;)</span></span><br><span class="line"><span class="string">const root = \&#x27;./\&#x27;</span></span><br><span class="line"><span class="string">// const root = path.resolve(\&#x27;./\&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// console.log(tarPath, root)</span></span><br><span class="line"><span class="string">const list = []</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const ignoreList = [</span></span><br><span class="line"><span class="string">    \&#x27;assets\&#x27;,</span></span><br><span class="line"><span class="string">    \&#x27;dist\&#x27;,</span></span><br><span class="line"><span class="string">    \&#x27;node_modules\&#x27;,</span></span><br><span class="line"><span class="string">    \&#x27;style\&#x27;,</span></span><br><span class="line"><span class="string">    \&#x27;.editorconfig\&#x27;,</span></span><br><span class="line"><span class="string">    \&#x27;.eslintignore\&#x27;,</span></span><br><span class="line"><span class="string">    \&#x27;.gitignore\&#x27;,</span></span><br><span class="line"><span class="string">    \&#x27;nodeSc.js\&#x27;,</span></span><br><span class="line"><span class="string">    \&#x27;package-lock.json\&#x27;,</span></span><br><span class="line"><span class="string">    \&#x27;yarn.lock\&#x27;,</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">const extnameList = [\&#x27;.js\&#x27;, \&#x27;.jsx\&#x27;]</span></span><br><span class="line"><span class="string">const getFile = url =&gt; &#123;</span></span><br><span class="line"><span class="string">    let fileList = fs.readdirSync(url)</span></span><br><span class="line"><span class="string">    fileList = fileList.filter(file =&gt; !ignoreList.includes(file))</span></span><br><span class="line"><span class="string">    // console.log(fileList)</span></span><br><span class="line"><span class="string">    fileList.forEach(file =&gt; &#123;</span></span><br><span class="line"><span class="string">        const fileDir = path.join(url, file)</span></span><br><span class="line"><span class="string">        const stats = fs.statSync(fileDir)</span></span><br><span class="line"><span class="string">        const isFile = stats.isFile&amp;#40;&amp;#41;</span></span><br><span class="line"><span class="string">        const isDir = stats.isDirectory()</span></span><br><span class="line"><span class="string">        if (isFile) &#123;</span></span><br><span class="line"><span class="string">            // console.log(fileDir)</span></span><br><span class="line"><span class="string">            const extname = path.extname(fileDir)</span></span><br><span class="line"><span class="string">            if (extnameList.includes(extname)) &#123;</span></span><br><span class="line"><span class="string">                list.push(fileDir)</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if (isDir) &#123;</span></span><br><span class="line"><span class="string">            getFile&amp;#40;fileDir&amp;#41;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">getFile&amp;#40;root&amp;#41;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const result = ignoreList.concat(list).join(\&#x27;\</span></span><br><span class="line"><span class="string">\&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fs.writeFileSync(tarPath, result, \&#x27;utf8\&#x27;)</span></span><br></pre></td></tr></table></figure><p>npm 下载<code>git-changed-files</code>可以检查当前 git 提交记录中修改过的文件，编写脚本<code>checkFileIgnore.js</code>在每<br>次 pre-commit 时，去检查有没有修改过老文件</p><p><code>cnpm install git-changed-files -D</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(\<span class="string">&#x27;fs\&#x27;)</span></span><br><span class="line"><span class="string">const path = require(\&#x27;path\&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const gitChangedFiles = require(\&#x27;git-changed-files\&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const tarPath = path.join(__dirname, \&#x27;.eslintignore\&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const eslintignore = fs.readFileSync(tarPath, \&#x27;utf-8\&#x27;)</span></span><br><span class="line"><span class="string">// 返回结果</span></span><br><span class="line"><span class="string">let result = \&#x27;\&#x27;</span></span><br><span class="line"><span class="string">console.log(\&#x27;----读取.eslintignore成功----\&#x27;)</span></span><br><span class="line"><span class="string">const extnameList = [\&#x27;.js\&#x27;, \&#x27;.jsx\&#x27;, \&#x27;.ts\&#x27;, \&#x27;.tsx\&#x27;]</span></span><br><span class="line"><span class="string">const getFile = async () =&gt; &#123;</span></span><br><span class="line"><span class="string">    const committedGitFiles = await gitChangedFiles(&#123; showCommitted: false, showStatus: true &#125;)</span></span><br><span class="line"><span class="string">    // console.log(committedGitFiles)</span></span><br><span class="line"><span class="string">    const unCommittedFiles = committedGitFiles.unCommittedFiles || []</span></span><br><span class="line"><span class="string">    const stagedFileList = unCommittedFiles.filter(fileObj =&gt; &#123;</span></span><br><span class="line"><span class="string">        return fileObj.status === \&#x27;Modified\&#x27;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    // console.log(stagedFileList)</span></span><br><span class="line"><span class="string">    stagedFileList.forEach(file =&gt; &#123;</span></span><br><span class="line"><span class="string">        const fileName = file.filename</span></span><br><span class="line"><span class="string">        const extname = path.extname(fileName)</span></span><br><span class="line"><span class="string">        if (extnameList.includes(extname)) &#123;</span></span><br><span class="line"><span class="string">            if (eslintignore.indexOf(fileName) !== -1) &#123;</span></span><br><span class="line"><span class="string">                // 判断.eslintignore文件中是否包含修改过的文件</span></span><br><span class="line"><span class="string">                console.log(`----存在遗留文件的修改----`)</span></span><br><span class="line"><span class="string">                const regex = new RegExp(`$&#123;fileName&#125;`, \&#x27;gi\&#x27;)</span></span><br><span class="line"><span class="string">                if (!result) &#123;</span></span><br><span class="line"><span class="string">                    result = eslintignore.replace(regex, \&#x27;\&#x27;)</span></span><br><span class="line"><span class="string">                &#125; else &#123;</span></span><br><span class="line"><span class="string">                    result = result.replace(regex, \&#x27;\&#x27;)</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                console.log(`将$&#123;fileName&#125;文件移出.eslintignore`)</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    // 最后只写入一次文件</span></span><br><span class="line"><span class="string">    if (result) &#123;</span></span><br><span class="line"><span class="string">        fs.writeFileSync(tarPath, result, \&#x27;utf8\&#x27;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">getFile&amp;#40;&amp;#41;</span></span><br></pre></td></tr></table></figure><p>更改<code>lint-staged</code>配置，每次提交前进行检查</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd .. &amp;&amp; husky install react-web/.husky&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;checkFileIgnore&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node ./checkFileIgnore.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env  npx eslint  --ext .js,.jsx  --fix $npm_config_file&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;js,jsx,ts,tsx&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;npm run checkFileIgnore&quot;</span><span class="punctuation">,</span> <span class="string">&quot;eslint --color&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-完成"><a href="#4-完成" class="headerlink" title="4.完成"></a>4.完成</h3><p>一切顺利整体流程应该为，修改代码，然后<code>git暂存</code>，<code>git 提交</code>，这时候会进入<code>pre-commit</code> git 钩子，执行<br>配置好的<code>lint-staged</code>指令，如果暂存区修改的文件里包含<code>js,jsx,ts,tsx</code>，会执行脚本命<br>令<code>npm run checkFileIgnore</code>，去检查有没有老文件，如果没有，略过，执行下一个命令<code>eslint --color</code>，如<br>果有，会将老文件从<code>.eslintignore</code>中移出，此时执行下一步走<code>eslint检查</code>，此时老文件已经不<br>在<code>eslintignore</code>中，所以会检查老文件，检查大概率不通过，此时老文件的错误地方会在<code>vscode</code>中标红，会有<br>相应的提示辅助修改，将所有错误修改完毕之后，再次进行提交，走上述流程，检查通过，提交成功</p><p>如果没有修改老文件，新文件校验通过之后正常提交，校验失败拦截提交失败</p><blockquote><p>在<em>lint-staged</em>配置中，<code>eslint</code>只是进行了检查，没有–fix 进行主动修复，如果想要可以手动自己添加，<br>建议不要，可以让开发者在手动更改错误的过程中明确项目配置常用的规则，提高代码开发质量</p></blockquote><h2 id="小程序适配"><a href="#小程序适配" class="headerlink" title="小程序适配"></a>小程序适配</h2><p>小程序 eslint 里关于 react 的规则都要删掉，并且全局变量添加小程序的变量，如<code>Page</code>，<code>Component</code>,<code>getApp</code> 等，替换<code>eslint-config-airbnb</code>为<code>eslint-config-airbnb-base</code>，关于<code>react</code>的包都不用下载</p><p>小程序配置<code>.prettierrc.js</code> 需要添加格式映射，并且<code>.eslintignore</code>里添加 *.wxs 吧所有 wxs 忽略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    overrides: [</span><br><span class="line">        &#123;</span><br><span class="line">            files: \&#x27;**/*.wxml\&#x27;,</span><br><span class="line">            options: &#123; parser: \&#x27;html\&#x27; &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    ...其他格式化代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vscode 也需要处理一下 setting.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[scss]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[wxml]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[wxss]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[html]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnPaste&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scssFormatter.printWidth&quot;</span><span class="punctuation">:</span> <span class="number">120</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prettier.printWidth&quot;</span><span class="punctuation">:</span> <span class="number">120</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 下面三行是插件wxml 的格式化也换成prettier</span></span><br><span class="line">  <span class="attr">&quot;minapp-vscode.wxmlFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;minapp-vscode.disableAutoConfig&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;minapp-vscode.reserveTags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;text&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 这个配合 prettierrc.js 一起使用 映射</span></span><br><span class="line">  <span class="attr">&quot;prettier.documentSelectors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;**/*.wxml&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://eslint.bootcss.com/docs/user-guide/configuring">eslint</a></p><p><a href="https://prettier.io/docs/en/index.html">prettier</a></p><p><a href="https://github.com/prettier/eslint-config-prettier">eslint-config-prettier</a></p><p><a href="https://github.com/prettier/eslint-config-prettier">eslint-plugin-prettier</a></p><p><a href="https://github.com/airbnb/javascript">airbnb-config</a></p><p><a href="https://typicode.github.io/husky/#/">husky</a></p><p><a href="https://www.npmjs.com/package/lint-staged/v/11.2.6">lint-staged</a></p><p><a href="https://www.npmjs.com/package/git-changed-files">git-changed-files</a></p><p><a href="https://github.com/webpack-contrib/eslint-webpack-plugin/tree/2.x">eslint-webpack-plugin</a></p><p>如何使用<br>点这里<br>logo</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说明示例项目为看准的 kz-web-dev&amp;#x2F;react-web&lt;/p&gt;
&lt;h1 id=&quot;如何改造项目&quot;&gt;&lt;a href=&quot;#如何改造项目&quot; class=&quot;headerlink&quot; title=&quot;如何改造项目&quot;&gt;&lt;/a&gt;如何改造项目&lt;/h1&gt;&lt;h2 id=&quot;eslin
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>小程序接入redux实践</title>
    <link href="http://webbhou.github.io/2022/11/02/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%85%A5redux%E5%AE%9E%E8%B7%B5/"/>
    <id>http://webbhou.github.io/2022/11/02/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%85%A5redux%E5%AE%9E%E8%B7%B5/</id>
    <published>2022-11-02T10:16:17.000Z</published>
    <updated>2025-04-08T06:14:49.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>小程序项目业务体量日渐庞大，越来越需要全局状态管理工具来实现数据管理及更新。 原先使用的<code>storage</code>及小程序的<code>globalData</code>都无法满足现有的业务需求，遂需要新的全局状态管理工具。<br>需求如下：</p><ul><li>单项数据流，涉及数据的改动、操作，入口需要把控。</li><li>部分数据存于客户端，页面重载后数据依旧在。</li><li>数据更新后自动更新使用到该数据的组件 dom。</li><li>数据改动的方法书写便利，代码易读，较少歧义。</li></ul><p>结合以上需求以及其他程序小程序的参考，决定使用<code>storage + redux + immer</code>的方式实现。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><ol><li>项目初始化时通过<code>storage</code>初始化<code>state</code>数据。</li><li>在小程序页面&#x2F;组件中，绑定<code>state</code>数据，根据<code>state</code>数据更新组件。</li><li>在小程序页面&#x2F;组件中，引入相应<code>action</code>，通过<code>action</code>操作改变<code>state</code>。</li><li><code>immer</code>在此中可理解为<code>reducer</code>执行过程中的语法糖，符合书写习惯，增加代码健壮性。</li></ol><p>流程图如下：<br><img src="/../image/micro_program_1.png" alt="redux.png"></p><p>基于该方案，需要达成共识的规范：</p><ul><li>彻底实施单项数据流，避免业务代码直接操作<code>storage</code>，<code>storage</code>仅与<code>redux</code>有数据交互，业务层也仅与<code>redux</code>有数据交互。</li><li>可以根据小程序分包结构来规划<code>reducers</code>的模块切分，但是绝不能将<code>reducer</code>文件置放于分包之中。</li><li>各个模块的<code>types</code>以 {模块名}&#x2F;{方法名} 命名，避免不同模块之间<code>type</code>的命名发生冲突。</li></ul><h1 id="目录结构说明"><a href="#目录结构说明" class="headerlink" title="目录结构说明"></a>目录结构说明</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">app.js</span><br><span class="line">app.json</span><br><span class="line">app.wxss</span><br><span class="line">common</span><br><span class="line">components</span><br><span class="line">pages</span><br><span class="line">libs</span><br><span class="line">   redux</span><br><span class="line">       immer.js</span><br><span class="line">       minapp-redux.js</span><br><span class="line">       redux-actions.min.js</span><br><span class="line">       redux-logger.js</span><br><span class="line">       redux-thunk.js</span><br><span class="line">       redux.js</span><br><span class="line">utils</span><br><span class="line">    redux</span><br><span class="line">       reducer.js</span><br><span class="line">       store.js</span><br><span class="line">       reducers</span><br><span class="line">          user.js</span><br></pre></td></tr></table></figure><p>目录结构解释：</p><p>根目录下的<code>libs/</code>文件夹用于存放第三方库，引入之后无需改动。</p><p><code>utils/</code>目录用于存放该开发人员编写的代码，所以将<code>store</code>入口及<code>reducers</code>放于<code>utils/redux</code>中。</p><h1 id="开发说明"><a href="#开发说明" class="headerlink" title="开发说明"></a>开发说明</h1><p>若在业务场景中需要将数据存于<code>redux</code>，假设该模块为<code>user</code>：</p><ol><li>在<code>/utils/redux/reducers/</code>目录下添加<code>user.js</code>，并设置好<code>types</code>，<code>Actions</code>，<code>initialState</code>，<code>reducer</code>。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import Immer from \&#x27;../../../libs/redux/immer\&#x27;;</span><br><span class="line">import store from \&#x27;../store\&#x27;</span><br><span class="line">import &#123; createAction &#125; from &quot;../../../libs/redux/redux-actions.min&quot;;</span><br><span class="line"></span><br><span class="line">// 设置types名</span><br><span class="line">export const types = &#123;</span><br><span class="line">    setUserStateType: \&#x27;user/setUserState\&#x27; // 更细用户状态状态</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置actions</span><br><span class="line">export const Actions = &#123;</span><br><span class="line">     setUserState: createAction(types.setUserStateType, opts =&gt; opts)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 初始化数据</span><br><span class="line">const initialState = &#123;</span><br><span class="line">    userState: wx.getStorageSync(\&#x27;userState\&#x27;) ? JSON.parse(wx.getStorageSync(\&#x27;userState\&#x27;)) : &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default function reducer(state = initialState, &#123; type, payload, error &#125;) &#123;</span><br><span class="line">    return Immer(state, draft =&gt; &#123;</span><br><span class="line">        switch (type) &#123;</span><br><span class="line">            case types.setUserStateType:</span><br><span class="line">                if (payload) &#123;</span><br><span class="line">                    draft.userState = payload;</span><br><span class="line">                    wx.setStorageSync(\&#x27;userState\&#x27;, JSON.stringify(payload));</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>/utils/redux/reducer.js</code>引入<code>user.js</code>，并纳入当前<code>redux</code>体系中。</li></ol><figure class="highlight javascript"><figcaption><span>import &#123; combineReducers &#125; from '../../libs/redux/redux';</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> \<span class="string">&#x27;./reducers/user\&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//合并多个reducer</span></span><br><span class="line"><span class="string">export default combineReducers(&#123;</span></span><br><span class="line"><span class="string">    user</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在业务代码中使用该模块。</li></ol><ul><li>在页面、组件中使用：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Actions &#125; from \&#x27;/utils/redux/reducers/user\&#x27;</span><br><span class="line">import &#123; connect &#125; from \&#x27;/libs/redux/minapp-redux\&#x27;</span><br><span class="line"></span><br><span class="line">// 安插 userState 于组件data中</span><br><span class="line">const stateMap = state =&gt; &#123;</span><br><span class="line">    const &#123; userState &#125; = state.user;</span><br><span class="line">    return &#123; userState &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 安插方法于组件中</span><br><span class="line">const methodMap = (dispatch, state) =&gt; (&#123;</span><br><span class="line">    setUserState(data) &#123;</span><br><span class="line">        dispatch(Actions.setUserState(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Page(</span><br><span class="line">    connect(stateMap, methodMap)(&#123;</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        onLoad () &#123;</span><br><span class="line">            this.setUserState(&#123;a: 1&#125;);</span><br><span class="line">            console.log(this.data.userState);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>直接在 js 文件中使用：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import store from \&#x27;/utils/redux/store\&#x27;;</span><br><span class="line">import &#123; Actions &#125; from \&#x27;/utils/redux/reducers/user\&#x27;</span><br><span class="line"></span><br><span class="line">store.dispatch(Actions.setUserState(&#123;</span><br><span class="line">      a: 1</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://www.npmjs.com/package/minapp-redux">miniapp-redux</a></p><p><a href="https://www.redux.org.cn/">redux</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;小程序项目业务体量日渐庞大，越来越需要全局状态管理工具来实现数据管理及更新。 原先使用的&lt;code&gt;storage&lt;/code&gt;及小程序的&lt;
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>visibleHoc高阶组件开发及使用</title>
    <link href="http://webbhou.github.io/2022/11/02/visibleHoc%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://webbhou.github.io/2022/11/02/visibleHoc%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2022-11-02T10:12:37.000Z</published>
    <updated>2025-04-08T06:14:49.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正常Modal的使用示例"><a href="#正常Modal的使用示例" class="headerlink" title="正常Modal的使用示例"></a>正常Modal的使用示例</h2><h3 id="定义一个普通Modal"><a href="#定义一个普通Modal" class="headerlink" title="定义一个普通Modal"></a>定义一个普通Modal</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const ModalNormal = (props) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    // 关闭Modal</span><br><span class="line">    const hideModal = () =&gt; &#123;</span><br><span class="line">        props.switchVisible(false)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;Modal</span><br><span class="line">            title=&quot;普通弹出Modal&quot;</span><br><span class="line">            visible=&#123;props.visible&#125;</span><br><span class="line">           &gt;</span><br><span class="line">            普通弹出Modal</span><br><span class="line">        &lt;/Modal&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ModalNormal</span><br></pre></td></tr></table></figure><h3 id="使用普通Modal"><a href="#使用普通Modal" class="headerlink" title="使用普通Modal"></a>使用普通Modal</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const DemoModal = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    // 定义显示的状态</span><br><span class="line">    const [isVisibleModal, set_isVisibleModal] = useState(false)</span><br><span class="line"></span><br><span class="line">    // 切换显示状态</span><br><span class="line">    const switchNormalModalVisible = (visible = false) =&gt; &#123;</span><br><span class="line">        set_isVisibleModal(visible)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 点击，切换状态，弹出Modal</span><br><span class="line">    const onClick_modalNormal = () =&gt; &#123;</span><br><span class="line">        switchNormalModalVisible(true)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;Button onClick=&#123;onClick_modalNormal&#125;&gt;弹出普通Modal&lt;/Button&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ModalNormal</span><br><span class="line">                visible=&#123;isVisibleModal&#125;</span><br><span class="line">                switchVisible=&#123;switchNormalModalVisible&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default DemoModal</span><br></pre></td></tr></table></figure><h2 id="使用VisibleHOC后，Modal的使用示例"><a href="#使用VisibleHOC后，Modal的使用示例" class="headerlink" title="使用VisibleHOC后，Modal的使用示例"></a>使用VisibleHOC后，Modal的使用示例</h2><h3 id="定义一个VisibleHOC包装的Modal"><a href="#定义一个VisibleHOC包装的Modal" class="headerlink" title="定义一个VisibleHOC包装的Modal"></a>定义一个VisibleHOC包装的Modal</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import VisibleHOC from &quot;@/components/visible-hoc/index.js&quot;;</span><br><span class="line">const ModalHOC = (props) =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Modal</span><br><span class="line">            title=&quot;VisibleHOC 弹出Modal&quot;</span><br><span class="line">            // props.visible 是 VisibleHOC 注入的</span><br><span class="line">            visible=&#123;props.visible&#125;</span><br><span class="line">            // props.onCloseIt 方法，是 VisibleHOC 注入的</span><br><span class="line">            onCancel=&#123;props.onCloseIt&#125;</span><br><span class="line">            onOk=&#123;props.onCloseIt&#125;</span><br><span class="line">        &gt;</span><br><span class="line">            VisibleHOC 弹出Modal</span><br><span class="line">        &lt;/Modal&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用VisibleHOC包装一下</span><br><span class="line">export default VisibleHOC(ModalHOC)</span><br></pre></td></tr></table></figure><h3 id="使用VisibleHOC包装的Modal"><a href="#使用VisibleHOC包装的Modal" class="headerlink" title="使用VisibleHOC包装的Modal"></a>使用VisibleHOC包装的Modal</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const DemoModal = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    // 点击，调用openIt，弹出Modal</span><br><span class="line">    const onClick_modalHOC = () =&gt; &#123;</span><br><span class="line">        // 传递的值，可以在Modal里，使用props.options获取</span><br><span class="line">        ModalHOC.openIt(&#123; a: 1, b: 2 &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick_modalHOC&#125;</span>&gt;</span>使用HOC弹出Modal<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ModalHOC</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default DemoModal</span><br></pre></td></tr></table></figure><h2 id="对比可见"><a href="#对比可见" class="headerlink" title="对比可见"></a>对比可见</h2><blockquote><p>代码量，减少很多。避免重复定义状态，切换状态的方法</p></blockquote><blockquote><p>父组件弹出、Modal组件内部关闭，变得非常简单</p></blockquote><h2 id="VisibleHOC使用说明"><a href="#VisibleHOC使用说明" class="headerlink" title="VisibleHOC使用说明"></a>VisibleHOC使用说明</h2><blockquote><p>包裹后，返回的组件</p></blockquote><table><thead><tr><th>名称</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>openIt</td><td>打开。支持传参，组件内部使用props.options获取</td><td>方法</td></tr><tr><td>closeIt</td><td>关闭</td><td>方法</td></tr><tr><td>visible</td><td>获取组件状态</td><td>属性，布尔值</td></tr></tbody></table><blockquote><p>被包裹的组件</p></blockquote><table><thead><tr><th>名称</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>onOpenIt</td><td>打开</td><td>方法</td></tr><tr><td>onCloseIt</td><td>关闭</td><td>方法</td></tr><tr><td>visible</td><td>可见状态</td><td>属性，布尔值</td></tr><tr><td>options</td><td>closeIt传递进来的值</td><td>属性，对象</td></tr></tbody></table><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>包裹返回的组件，使用的是<strong>openIt、closeIt</strong>。被包裹的组件，使用<strong>onOpenIt、onCloseIt</strong>。方法名是不同的，用来区分是外部调用（方法），还是内部调用（事件）</p></blockquote><blockquote><p>被包裹的组件，也可以和正常Modal一样的使用，手动传入visible，来控制显示和关闭。手动传入自定义属性</p></blockquote><h3 id="组件源码"><a href="#组件源码" class="headerlink" title="组件源码"></a>组件源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PackageEnv</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/js/utils/base.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">GlobalConfig</span> = &#123;</span><br><span class="line">    <span class="attr">store</span>: &#123;&#125;,</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">id, instance</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">PackageEnv</span>.<span class="property">isDev</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">store</span>[id]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">id, instance</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">PackageEnv</span>.<span class="property">isDev</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">store</span>[id] = instance</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">VisibleHOC</span> = <span class="keyword">function</span> (<span class="params">Component, id</span>) &#123;</span><br><span class="line">    <span class="comment">// console.warn(1, &quot;VisibleHOC&quot;, Component.name, id)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> curId = id || <span class="title class_">Component</span>.<span class="property">name</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> instance = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> switchVisible = <span class="keyword">function</span> (<span class="params">visible = <span class="literal">false</span>, options</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> state = &#123; visible &#125;</span><br><span class="line">        <span class="keyword">if</span> (options !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            state.<span class="property">options</span> = options;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> curInstance = <span class="title class_">GlobalConfig</span>.<span class="title function_">get</span>(curId, instance)</span><br><span class="line">        <span class="comment">// console.log(&#x27;switchVisible&#x27;, curInstance, state)</span></span><br><span class="line">        curInstance &amp;&amp; curInstance.<span class="title function_">setState</span>(state)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> open = <span class="keyword">function</span> (<span class="params">opts</span>) &#123;</span><br><span class="line">        <span class="title function_">switchVisible</span>(<span class="literal">true</span>, opts)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> close = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">switchVisible</span>(<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> checkVisible = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> curInstance = <span class="title class_">GlobalConfig</span>.<span class="title function_">get</span>(curId, instance)</span><br><span class="line">        <span class="keyword">return</span> curInstance ? curInstance.<span class="property">state</span>.<span class="property">visible</span> : <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">React</span>.<span class="property">PureComponent</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">            <span class="variable language_">super</span>(props)</span><br><span class="line">            instance = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">            <span class="title class_">GlobalConfig</span>.<span class="title function_">set</span>(curId, <span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> openIt = open</span><br><span class="line">        <span class="keyword">static</span> closeIt = close</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">get</span> <span class="title function_">visible</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">checkVisible</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">visible</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">options</span>: <span class="literal">null</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">            instance = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">            <span class="title class_">GlobalConfig</span>.<span class="title function_">set</span>(curId, <span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">            instance = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">            <span class="title class_">GlobalConfig</span>.<span class="title function_">set</span>(curId, <span class="literal">null</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">visible</span>=<span class="string">&#123;this.state.visible&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">options</span>=<span class="string">&#123;this.state.options&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">onOpenIt</span>=<span class="string">&#123;open&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">onCloseIt</span>=<span class="string">&#123;close&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &#123;<span class="attr">...this.props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                /&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">VisibleHOC</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正常Modal的使用示例&quot;&gt;&lt;a href=&quot;#正常Modal的使用示例&quot; class=&quot;headerlink&quot; title=&quot;正常Modal的使用示例&quot;&gt;&lt;/a&gt;正常Modal的使用示例&lt;/h2&gt;&lt;h3 id=&quot;定义一个普通Modal&quot;&gt;&lt;a href=&quot;#定义
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>webpack4-&gt;5升级及优化</title>
    <link href="http://webbhou.github.io/2022/11/02/webpack4-5%E5%8D%87%E7%BA%A7%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    <id>http://webbhou.github.io/2022/11/02/webpack4-5%E5%8D%87%E7%BA%A7%E5%8F%8A%E4%BC%98%E5%8C%96/</id>
    <published>2022-11-02T10:10:36.000Z</published>
    <updated>2025-04-08T06:14:49.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack4-升级-webapck5"><a href="#webpack4-升级-webapck5" class="headerlink" title="webpack4 升级 webapck5"></a>webpack4 升级 webapck5</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i react-dev-utils webpackbar friendly-errors-webpack-plugin -D</span><br><span class="line"></span><br><span class="line">sudo npm i webpack webpack-cli webpack-dev-server webpack-merge -D</span><br></pre></td></tr></table></figure><h2 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h2><h2 id="1、自定义开发环境"><a href="#1、自定义开发环境" class="headerlink" title="1、自定义开发环境"></a>1、自定义开发环境</h2><p>对于开发环境，我们更加灵活的自定义配置的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebpackDevServer</span> = <span class="built_in">require</span>(\<span class="string">&#x27;webpack-dev-server\&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const compiler = webpack(config)</span></span><br><span class="line"><span class="string">const devServer = new WebpackDevServer(compiler, devConfig)</span></span><br><span class="line"><span class="string">devServer.listen(Config.port, host, err =&gt; &#123;</span></span><br><span class="line"><span class="string">  if (err) &#123;</span></span><br><span class="line"><span class="string">    return console.log(err);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  console.log(chalk.cyan(\&#x27;Starting the development server...\</span></span><br><span class="line"><span class="string">\&#x27;));</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><h2 id="2、端口号-可能被占用"><a href="#2、端口号-可能被占用" class="headerlink" title="2、端口号(可能被占用)"></a>2、端口号(可能被占用)</h2><blockquote><p>随着项目越来越多，端口号可能会出现重复，所以启动项目时发现端口号已经被占用，需要找到合适的可用端口进行启动项目</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> portfinder = <span class="built_in">require</span>(\<span class="string">&#x27;portfinder\&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">portfinder.getPortPromise()</span></span><br><span class="line"><span class="string">    .catch((err) =&gt; &#123;</span></span><br><span class="line"><span class="string">        console.log(\&#x27;webpack启动错误\&#x27;, err)</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    .then((port) =&gt; &#123;</span></span><br><span class="line"><span class="string">   \t// 没有被占用的端口号</span></span><br><span class="line"><span class="string">  \t\tconsole.log(port)</span></span><br><span class="line"><span class="string">\t\t&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="3、ip-链接"><a href="#3、ip-链接" class="headerlink" title="3、ip 链接"></a>3、ip 链接</h2><p>需求：由于移动端或者 pc 端，经常会拿 ip 链接进行手机的调试，或者将 ip 链接发送给对方进行联调，这时如果开发工具者控制台有这样的 ip 链接就很方便</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">FriendlyErrorsWebpackPlugin</span> = <span class="built_in">require</span>(\<span class="string">&#x27;friendly-errors-webpack-plugin\&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">new MyFriendlyErrorsWebpackPlugin(&#123;</span></span><br><span class="line"><span class="string">  compilationSuccessInfo: &#123;</span></span><br><span class="line"><span class="string">    messages: [</span></span><br><span class="line"><span class="string">      \&#x27;App running at:\&#x27;,</span></span><br><span class="line"><span class="string">      `- Local:   $&#123;chalk.cyan(newWorkUrl(host, port, Config.prefix))&#125;`,</span></span><br><span class="line"><span class="string">      `- Network: $&#123;chalk.cyan(newWorkUrl(getNetworkIp(), port, Config.prefix))&#125;`,</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    notes: [</span></span><br><span class="line"><span class="string">      \&#x27;Note that the development build is not optimized.\&#x27;,</span></span><br><span class="line"><span class="string">      `To create a production build, run $&#123;chalk.cyan(\&#x27;npm run build\&#x27;)&#125;`,</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">&#125;),</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(\<span class="string">&#x27;os\&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function getNetworkIp() &#123;</span></span><br><span class="line"><span class="string">    let needHost = \&#x27;\&#x27;; // 打开的host</span></span><br><span class="line"><span class="string">    try &#123;</span></span><br><span class="line"><span class="string">        // 获得网络接口列表</span></span><br><span class="line"><span class="string">        let network = os.networkInterfaces();</span></span><br><span class="line"><span class="string">        for (let dev in network) &#123;</span></span><br><span class="line"><span class="string">            let iface = network[dev];</span></span><br><span class="line"><span class="string">            for (let i = 0; i &lt; iface.length; i++) &#123;</span></span><br><span class="line"><span class="string">                let alias = iface[i];</span></span><br><span class="line"><span class="string">                if (alias.family === \&#x27;IPv4\&#x27; &amp;&amp; alias.address !== \&#x27;127.0.0.1\&#x27; &amp;&amp; !alias.internal) &#123;</span></span><br><span class="line"><span class="string">                    needHost = alias.address;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125; catch (e) &#123;</span></span><br><span class="line"><span class="string">        needHost = \&#x27;localhost\&#x27;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return needHost;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function prettyPrintHost(host) &#123;</span></span><br><span class="line"><span class="string">    const isUnspecifiedHost = host === \&#x27;0.0.0.0\&#x27; || host === \&#x27;::\&#x27;;</span></span><br><span class="line"><span class="string">    if (isUnspecifiedHost) &#123;</span></span><br><span class="line"><span class="string">        return \&#x27;localhost\&#x27;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return host</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function newWorkUrl(host, port, prefix) &#123;</span></span><br><span class="line"><span class="string">    return `http://$&#123;prettyPrintHost(host)&#125;:$&#123;port&#125;/$&#123;prefix ? prefix : \&#x27;\&#x27;&#125;`</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>antv 和 webpack5 之间有一些警告问题，一旦有了警告，那么 friendly-errors-webpack-plugin 就不会将我们的 ip 链接暴露出来，所以本地二次封装 friendly-errors-webpack-plugin 插件，达到目的</p><h2 id="4、添加缓存"><a href="#4、添加缓存" class="headerlink" title="4、添加缓存"></a>4、添加缓存</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: \<span class="string">&#x27;filesystem\&#x27;,  //\&#x27;memory\&#x27; | \&#x27;filesystem\&#x27;</span></span><br><span class="line"><span class="string">  cacheDirectory: path.resolve(__dirname, \&#x27;../node_modules/.cache/webpack\&#x27;),</span></span><br><span class="line"><span class="string">&#125;,</span></span><br></pre></td></tr></table></figure><h3 id="4-1、去除-dll-动态链接库"><a href="#4-1、去除-dll-动态链接库" class="headerlink" title="4.1、去除 dll 动态链接库"></a>4.1、去除 dll 动态链接库</h3><p>create-react-app 以及 vue-cli 在 webpack4.x 的时候就已经移除 dll,原因：就是 webpack4.x 的性能足够好，使用 dll 后收益非常小，而且 dll 还需要进行额外的繁琐配置</p><ul><li><a href="https://github.com/vuejs/vue-cli/issues/1205">vue-cli 去除 dll 原因解释</a></li><li><a href="https://github.com/facebook/create-react-app/pull/2710">create-react-app 去除 dll 原因解释</a></li></ul><p>结论：我们也去除 dll,配置中将所有关于 dll 的全部删除掉</p><h2 id="5、关于图片和图标"><a href="#5、关于图片和图标" class="headerlink" title="5、关于图片和图标"></a>5、关于图片和图标</h2><p>去除 file-loader 和 url-loader</p><p>方式一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>:&#123;</span><br><span class="line">  <span class="attr">assetModuleFilename</span>: <span class="string">&quot;images/[contenthash][ext][query]&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">module</span>:&#123;</span><br><span class="line">  <span class="attr">rules</span>:[</span><br><span class="line">    &#123; <span class="comment">// 图标的转化</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\\.(woff|woff2|eot|ttf|otf|svg)$/i</span>,</span><br><span class="line">      <span class="attr">type</span>: \<span class="string">&#x27;asset/resource\&#x27;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123; // 图片的转化</span></span><br><span class="line"><span class="string">      test: /\\.(jpe?g|png|gif|bmp)$/i,</span></span><br><span class="line"><span class="string">      type: \&#x27;asset\&#x27;,</span></span><br><span class="line"><span class="string">      parser: &#123;</span></span><br><span class="line"><span class="string">        dataUrlCondition: &#123;</span></span><br><span class="line"><span class="string">          maxSize: 8192,// 8kb</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>方式二：(采用)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>:&#123;</span><br><span class="line">  <span class="attr">rules</span>:[</span><br><span class="line">    &#123; <span class="comment">// 图标的转化</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\\.(woff|woff2|eot|ttf|otf|svg)$/i</span>,</span><br><span class="line">      <span class="attr">type</span>: \<span class="string">&#x27;asset/resource\&#x27;,</span></span><br><span class="line"><span class="string">      generator: &#123;</span></span><br><span class="line"><span class="string">        filename: \&#x27;fonts/[contenthash][ext][query]\&#x27;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123; // 图片的转化</span></span><br><span class="line"><span class="string">      test: /\\.(jpe?g|png|gif|bmp)$/i,</span></span><br><span class="line"><span class="string">      type: \&#x27;asset\&#x27;,</span></span><br><span class="line"><span class="string">      parser: &#123;</span></span><br><span class="line"><span class="string">        dataUrlCondition: &#123;</span></span><br><span class="line"><span class="string">          maxSize: 8192,// 8kb</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      generator: &#123;</span></span><br><span class="line"><span class="string">        filename: \&#x27;images/[contenthash][ext][query]\&#x27;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="6、css-的路径问题"><a href="#6、css-的路径问题" class="headerlink" title="6、css 的路径问题"></a>6、css 的路径问题</h2><p>因为 css 和 images 是单独打包成一个独立的文件夹，那么 css 中寻找图片路径是从 css 目录开始找的，所以需要配置下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">isDevelopment ? &#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">  <span class="attr">options</span>: &#123; <span class="attr">esModule</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">&#125; : &#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">  <span class="attr">options</span>: &#123; <span class="attr">esModule</span>: <span class="literal">true</span>, <span class="attr">publicPath</span>: \<span class="string">&#x27;../\&#x27; &#125;, // 在原来配置的基础上添加publicPath属性</span></span><br><span class="line"><span class="string">&#125;,</span></span><br></pre></td></tr></table></figure><h2 id="7、package-中的-scripts-改造"><a href="#7、package-中的-scripts-改造" class="headerlink" title="7、package 中的 scripts 改造"></a>7、package 中的 scripts 改造</h2><p>改造前:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">     <span class="string">&quot;preview&quot;</span>: <span class="string">&quot;node scripts/preview.js&quot;</span>,</span><br><span class="line">     <span class="string">&quot;ka&quot;</span>: <span class="string">&quot;terser ./js/utils/ka.js -m -c -o ./js/utils/ka-min.js&quot;</span>,</span><br><span class="line">     <span class="string">&quot;dll&quot;</span>: <span class="string">&quot;webpack --config ./scripts/dll.webpack.js&quot;</span>,</span><br><span class="line">     <span class="string">&quot;start&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development webpack-dev-server --hot --progress --colors --PACKAGE_ENV development --config ./scripts/webpack.dev.js&quot;</span>,</span><br><span class="line">     <span class="string">&quot;local&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production webpack --PACKAGE_ENV local --progress --config ./scripts/webpack.prod.js&quot;</span>,</span><br><span class="line">     <span class="string">&quot;test&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production webpack --PACKAGE_ENV test --progress --config ./scripts/webpack.prod.js&quot;</span>,</span><br><span class="line">     <span class="string">&quot;pre&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production webpack --PACKAGE_ENV pre --progress --config ./scripts/webpack.prod.js&quot;</span>,</span><br><span class="line">     <span class="string">&quot;build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production webpack --PACKAGE_ENV production --progress --config ./scripts/webpack.prod.js&quot;</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>开发：npm run start</p><p>打包：npm run local&#x2F;test&#x2F;pre&#x2F;build</p><p>改造后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">       <span class="string">&quot;preview&quot;</span>: <span class="string">&quot;node scripts/preview.js&quot;</span>,</span><br><span class="line">       <span class="string">&quot;ka&quot;</span>: <span class="string">&quot;terser ./js/utils/ka.js -m -c -o ./js/utils/ka-min.js&quot;</span>,</span><br><span class="line">       <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;node ./scripts/webpack.dev&quot;</span>,</span><br><span class="line">       <span class="string">&quot;build:hr&quot;</span>: <span class="string">&quot;webpack --config ./scripts/webpack.prod&quot;</span>,</span><br><span class="line">       <span class="string">&quot;start&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development PACKAGE_ENV=development npm run dev&quot;</span>,</span><br><span class="line">       <span class="string">&quot;local&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production PACKAGE_ENV=local npm run build:hr&quot;</span>,</span><br><span class="line">       <span class="string">&quot;test&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production PACKAGE_ENV=test npm run build:hr&quot;</span>,</span><br><span class="line">       <span class="string">&quot;pre&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production PACKAGE_ENV=pre npm run build:hr&quot;</span>,</span><br><span class="line">       <span class="string">&quot;build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production PACKAGE_ENV=production npm run build:hr&quot;</span></span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>开发：npm run start</p><p>打包：npm run local&#x2F;test&#x2F;pre&#x2F;build</p><h2 id="8、细节问题"><a href="#8、细节问题" class="headerlink" title="8、细节问题"></a>8、细节问题</h2><h3 id="8-1、webpack5-和-cnpm-有兼容性"><a href="#8-1、webpack5-和-cnpm-有兼容性" class="headerlink" title="8.1、webpack5 和 cnpm 有兼容性"></a>8.1、webpack5 和 cnpm 有兼容性</h3><blockquote><p>因为 webpack5 里面的解析包是按照 npm 标准的@babel 这样的格式，如果违反规则直接失败，而 cnpm 是_@babel 多了一个下划线</p></blockquote><p>结论：避免使用 cnpm，使用 npm 和 yarn 的方式</p><h3 id="8-2、webpack-NamedChunksPlugin-被废弃"><a href="#8-2、webpack-NamedChunksPlugin-被废弃" class="headerlink" title="8.2、webpack.NamedChunksPlugin 被废弃"></a>8.2、webpack.NamedChunksPlugin 被废弃</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">moduleIds</span>: \<span class="string">&#x27;deterministic\&#x27;, // 模块名称的生成规则 -&gt; 根据模块名称生成简短的hash值</span></span><br><span class="line"><span class="string">    chunkIds: \&#x27;deterministic\&#x27;, // 代码块名称的生成规则</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-3、watermark-dom"><a href="#8-3、watermark-dom" class="headerlink" title="8.3、watermark-dom"></a>8.3、watermark-dom</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># webpack4引用</span><br><span class="line"><span class="keyword">import</span> watermark <span class="keyword">from</span> \<span class="string">&#x27;watermark-dom\&#x27;</span></span><br><span class="line"><span class="string">watermark.loading(&#123;&#125;)</span></span><br><span class="line"><span class="string"># webapack5</span></span><br><span class="line"><span class="string">改成</span></span><br><span class="line"><span class="string">import \&#x27;watermark-dom\&#x27;</span></span><br><span class="line"><span class="string">watermark.loading(&#123;&#125;)</span></span><br></pre></td></tr></table></figure><p>原因：webpack4 和 webpack5 对非【commonjs 和 esmodule】打包方式不一致，webpack5 是直接将其注入到 window 属性中</p><h3 id="8-4、mac-启动项目默认打开一个-tab"><a href="#8-4、mac-启动项目默认打开一个-tab" class="headerlink" title="8.4、mac 启动项目默认打开一个 tab"></a>8.4、mac 启动项目默认打开一个 tab</h3><p>举例：如果本地已经启动了 <a href="http://localhost:8080/web/">http://localhost:8080/web/</a> 的项目，并且在浏览器中打开了(不关闭)，如果我们将 8080 端口的项目关掉，在重新启动项目，则会在浏览器中找到刚才运行的项目页面开始编译，不会重新在浏览器中重新打开一个新的页面</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const openBrowser = require(\&#x27;react-dev-utils/openBrowser\&#x27;);</span><br><span class="line"></span><br><span class="line">devServer.listen(Config.port, host, err =&gt; &#123;</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    return console.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(chalk.cyan(\&#x27;Starting the development server...\</span><br><span class="line">\&#x27;));</span><br><span class="line"><span class="addition">+  openBrowser(`http://localhost:$&#123;port&#125;/$&#123;Config.prefix&#125;`)</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="8-5、清空控制台信息"><a href="#8-5、清空控制台信息" class="headerlink" title="8.5、清空控制台信息"></a>8.5、清空控制台信息</h3><p>原因：开发中，启动项目时，我们并不需要控制台这么多信息，本着简洁的原则需要：编译时间、以及项目链接</p><p>开发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">WebpackDevServer</span>(compiler, &#123;</span><br><span class="line">  <span class="attr">overlay</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">quiet</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>生产</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stats</span>: &#123;</span><br><span class="line">         <span class="attr">all</span>: <span class="literal">false</span>,</span><br><span class="line">         <span class="attr">errors</span>: <span class="literal">true</span>,</span><br><span class="line">         <span class="attr">moduleTrace</span>: <span class="literal">true</span>,</span><br><span class="line">         <span class="attr">logging</span>: \<span class="string">&#x27;error\&#x27;,</span></span><br><span class="line"><span class="string">         assets: true,</span></span><br><span class="line"><span class="string">     &#125;,</span></span><br></pre></td></tr></table></figure><h3 id="8-6-移除-clean-webpack-plugin"><a href="#8-6-移除-clean-webpack-plugin" class="headerlink" title="8.6 移除 clean-webpack-plugin"></a>8.6 移除 clean-webpack-plugin</h3><ul><li>5.20 版本以后 output 新增特性 clean，用于清除 dist 文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>, <span class="comment">// Clean the output directory before emit.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="移除插件"><a href="#移除插件" class="headerlink" title="移除插件"></a>移除插件</h2><ul><li>add-asset-html-webpack-plugin 不再需要</li><li>open-browser-webpack-plugin 新插件替换</li><li>url-loader、file-loader 对于图片&#x2F;图标 webpack5 有新的写法</li><li>hard-source-webpack-plugin 不再需要，有新的缓存方式</li><li>clean-webpack-plugin 移除</li></ul><h2 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h2><ul><li><p>react-dev-utils 辅助工具</p></li><li><p>friendly-errors-webpack-plugin 启动提示</p></li><li><p>webpackbar 启动进度条&#x2F;编译时间</p></li></ul><h2 id="升级前后编译对比"><a href="#升级前后编译对比" class="headerlink" title="升级前后编译对比"></a>升级前后编译对比</h2><table><thead><tr><th>webpack 版本</th><th>首次编译(s)</th><th>二次启动(s)</th><th>修改文件编译(s)</th><th>打包时间(s)</th><th>打包体积</th><th>备注</th></tr></thead><tbody><tr><td>4.41.0</td><td>25s 左右</td><td>25s 左右</td><td>1s 左右</td><td>40 左右</td><td>2730kb</td><td></td></tr><tr><td>5.43.0</td><td>25s 左右</td><td>3s 左右</td><td>1s 左右</td><td>40 左右</td><td>2669kb</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webpack4-升级-webapck5&quot;&gt;&lt;a href=&quot;#webpack4-升级-webapck5&quot; class=&quot;headerlink&quot; title=&quot;webpack4 升级 webapck5&quot;&gt;&lt;/a&gt;webpack4 升级 webapck5&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>企业微信开发</title>
    <link href="http://webbhou.github.io/2022/11/02/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    <id>http://webbhou.github.io/2022/11/02/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/</id>
    <published>2022-11-02T10:08:35.000Z</published>
    <updated>2025-04-08T06:14:49.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="泰坦星企业微信前端开发文档"><a href="#泰坦星企业微信前端开发文档" class="headerlink" title="泰坦星企业微信前端开发文档"></a>泰坦星企业微信前端开发文档</h1><ul><li>一些基本概念</li><li>前期准备及应用配置</li><li>本地开发及配置代理</li><li>遇到的一些问题</li></ul><h3 id="1-一些基本概念"><a href="#1-一些基本概念" class="headerlink" title="1.一些基本概念"></a>1.一些基本概念</h3><p>微信侧边栏的位置</p><p><img src="/../image/wecom_dev_1.png" alt="WX20220520-142036@2x.png"></p><h4 id="注意：只有外部联系人和外部群可见"><a href="#注意：只有外部联系人和外部群可见" class="headerlink" title="注意：只有外部联系人和外部群可见"></a>注意：只有外部联系人和外部群可见</h4><p>什么是外部联系人（群）</p><p>企业账号添加的非企业内部账号的用户（群）就是外部联系人（群），外部联系人（群）有以下标识<br><img src="/../image/wecom_dev_2.png" alt="WX20220520-142157@2x.png"></p><p>备注：为方便开发，可将自己的微信账号添加为自己企微账号的外部联系人</p><p>什么是微信 JS-SDK<br>微信 JS-SDK 是微信公众平台面向网页开发者提供的基于微信内的网页开发工具包。<br>通过使用微信 JS-SDK，网页开发者可借助微信高效地使用拍照、选图、语音、位置等手机系统的能力，同时可以直接使用微信分享、扫一扫等微信特有的能力，为微信用户提供更优质的网页体验。</p><h3 id="2-前期准备及应用配置"><a href="#2-前期准备及应用配置" class="headerlink" title="2.前期准备及应用配置"></a>2.前期准备及应用配置</h3><ul><li>登录<a href="https://work.weixin.qq.com/wework_admin/frame">企业微信后台</a></li><li>创建内部应用</li></ul><p><img src="/../image/wecom_dev_3.png" alt="WX20220520-142235@2x.png"></p><ul><li>填写相关信息，完成</li></ul><p><img src="/../image/wecom_dev_4.png" alt="WX20220520-142324@2x.png"></p><ul><li>配置应用的域名<br><img src="/../image/wecom_dev_5.png" alt="WX20220520-142359@2x.png"></li></ul><p>备注：在实际开发中一般不用前端同学来进行以上配置，但是需要用到一些参数</p><h3 id="3-本地开发及配置代理"><a href="#3-本地开发及配置代理" class="headerlink" title="3.本地开发及配置代理"></a>3.本地开发及配置代理</h3><ul><li><p>本地项目中的一些参数设置<br>前端项目中需要的参数有两个：<br>（1）corpId 我的企业 - 企业 ID，一个企业会有一个 ID<br>（2）agentId 自建应用的 agentId，不同自建应用会有不同的 agentId</p></li><li><p>整体运行流程</p></li></ul><p>微信 H5 和普通 H5 在登录授权方面存在差异，我们自己的 h5 通常只需要走自己的登录流程，用户的账号密码只存在于我们自己的后台，而企业微信因为要获取用户的一些微信信息，比如头像用户名等，需要调用微信的授权登录，微信提供了一套 OAuth 的授权登录方式，可以让从微信终端打开的网页获取成员的身份信息，从而免去登录的环节。企业应用中的 URL 链接（包括自定义菜单或者消息中的链接），均可通过 OAuth2.0 验证接口来获取成员的 UserId 身份信息。</p><p>接入 OAuth 的整体流程</p><p><img src="/../image/wecom_dev_6.png" alt="WX20220520-142444@2x.png"><br>通常逻辑是我们在进入到 h5 实际页面前会去调用 OAuth 的登录链接，将我们的页面拼入到链接的 redirect_url 参数中，授权认证成功后页面回到回调地址，同时 cookie 中携带了用户的身份令牌，但是在我们的实际项目中考虑到 OAuth 认证有一定的时间开销，而我们的企微项目又需要频繁获取用户信息，所以采用了微信建议的缓存策略</p><p>1、企业应用中的 URL 链接直接填写企业自己的页面地址<br>2、成员操作跳转到企业页面时，企业后台校验是否有标识成员身份的 cookie 信息，此 cookie 由企业生成<br>3、如果没有匹配的 cookie，则重定向到 OAuth 验证链接，获取成员的身份信息后，由企业后台植入标识成员身份的 cookie 信息<br>4、根据 cookie 获取成员身份后，再进入相应的页面</p><p>我们的 OAuth 认证放在了项目的响应拦截器里<br><img src="/../image/wecom_dev_7.png" alt="WX20220520-142516@2x.png"></p><p>当 code 为 3 时，代表此用户未登录，后台返回 OAuth 认证链接，页面进行重定向<br>在企业微信开发中我们需要使用微信提供的 JS-SDK，在项目中通过 cdn 方式引入</p><p><img src="/../image/wecom_dev_8.png" alt="WX20220520-142546@2x.png"></p><p>在进入页面组件前进行初始化 JS-SDK，初始化 JS-SDK 需要我们前文提到过的 corpId 和 agentId</p><p><img src="/../image/wecom_dev_9.png" alt="WX20220520-142621@2x.png"></p><p>不同的环境已经配置了不同的 ID</p><p><img src="/../image/wecom_dev_10.png" alt="WX20220520-142652@2x.png"></p><p>经过以上配置，在项目中已经可以正确使用 JS-SDK 了</p><p>备注：在企微项目中会经常通过入口来判断是否展示当前页面，这部分已经做了统一封装，只需要在路由文件中加入入口配置即可<br><img src="/../image/wecom_dev_11.png" alt="WX20220520-142729@2x.png"></p><p>如上，学员跟进只能在外部联系人入口才能展示</p><h1 id="本地开发配置代理"><a href="#本地开发配置代理" class="headerlink" title="本地开发配置代理"></a>本地开发配置代理</h1><h4 id="为什么要配置本地代理？"><a href="#为什么要配置本地代理？" class="headerlink" title="为什么要配置本地代理？"></a>为什么要配置本地代理？</h4><p>每一个自建应用需要填入安全域名，作为页面地址，同时也是 OAuth 回调地址，该域名不能填入本地 ip，否则在微信端会校验不通过，如果填入正确域名，本地启动的项目会在 OAuth 认证成功后跳到该域名地址，本地无法开发。<br><img src="/../image/wecom_dev_12.png" alt="WX20220520-142801@2x.png"></p><p>所以，我们想在本地开发的话需要将填入的可信域名代理到本地 ip，目前项目通常的代理方法是使用 whistle 工具</p><p>Whistle 代理工具，可以轻松地将侧边栏代理到 localhost：</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>npm install -g whistle</p><h1 id="开启-Whistle"><a href="#开启-Whistle" class="headerlink" title="开启 Whistle"></a>开启 Whistle</h1><p>w2 start</p><p>打开 <a href="http://127.0.0.1:8899/">http://127.0.0.1:8899/</a> (opens new window)可见 Whistle 代理面板。</p><p><img src="/../image/wecom_dev_13.png" alt="WX20221020-134917.png"></p><p>下面要把本机的请求都用 Whistle 来做代理：</p><p>System Preferences &gt; Network &gt; Advanced &gt; Proxies &gt; HTTP or HTTPS</p><p><img src="/../image/wecom_dev_14.png" alt="WX20221020-135026@2x.png"></p><p><img src="/../image/wecom_dev_15.png" alt="WX20221020-135853@2x.png"></p><p><img src="/../image/wecom_dev_16.png" alt="WX20221020-135105@2x.png"></p><p>这里最好 Web Proxy(HTTP) 和 Secure WebProxy(HTTPS) 都用 127.0.0.1:8899 做代理。</p><p>Whistle 来全局代理的一个缺点就是有些网络请求可能出现访问失败，比如开发时使用 ant-design 组件库等， 可以在上面的 “Bypass proxy settings for these Hosts &amp; Domains” 里添加需要排除的网络请求。</p><p>#Whistle 捕获 Https<br>配置页的一定要捕获 https 协议的，所以我们还要允许 Whistle 捕获 HTTPS 请求。</p><p>按下面步骤一步一步来，要全套做完。<br><a href="http://wproxy.org/whistle/webui/https.html">允许 Whistle 捕获 HTTPS 请求</a></p><h1 id="添加-Whistle-代理规则"><a href="#添加-Whistle-代理规则" class="headerlink" title="添加 Whistle 代理规则"></a>添加 Whistle 代理规则</h1><p>当配置好了 Whistle 之后，就可以加入代理规则：</p><p><img src="/../image/wecom_dev_17.png" alt="WX20221020-134917.png"></p><p>把 ke-qa.hou.com 代理到 <a href="http://0.0.0.0:8085/">http://0.0.0.0:8085</a>, 具体规则根据项目本地地址进行配置即可</p><p>以上就是本地开发的全过程了！</p><h3 id="4-企微侧边栏开启调试工具"><a href="#4-企微侧边栏开启调试工具" class="headerlink" title="4.企微侧边栏开启调试工具"></a>4.企微侧边栏开启调试工具</h3><h4 id="Mac-打开企微控制台"><a href="#Mac-打开企微控制台" class="headerlink" title="Mac 打开企微控制台"></a>Mac 打开企微控制台</h4><p><img src="/../image/wecom_dev_18.png" alt="WX20221020-140935.png"></p><ol><li>快捷键<code>commond+shift+ctrl+D</code>，会出现一个弹窗，提示 Debug 模式开启</li><li>开启后 帮助 &#x3D;&gt; 浏览器、webView 相关 &#x3D;&gt; 开启 webView 元素审查</li><li>在需要打开检查的界面：双指点击 &#x3D;&gt; 选择‘检查元素’</li></ol><h3 id="5-遇到的一些问题（随时补充）"><a href="#5-遇到的一些问题（随时补充）" class="headerlink" title="5.遇到的一些问题（随时补充）"></a>5.遇到的一些问题（随时补充）</h3><ul><li>页面路由变化的时候需要重新 initSDK，否则在移动端调用 sdk 会失效（待解决）</li><li>移动端刚进到页面时 sdk 偶尔失效（只有我自己遇到过，待解决）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;泰坦星企业微信前端开发文档&quot;&gt;&lt;a href=&quot;#泰坦星企业微信前端开发文档&quot; class=&quot;headerlink&quot; title=&quot;泰坦星企业微信前端开发文档&quot;&gt;&lt;/a&gt;泰坦星企业微信前端开发文档&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一些基本概念&lt;/li&gt;
&lt;li&gt;前期准备
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>微前端入门和实践</title>
    <link href="http://webbhou.github.io/2022/11/02/%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E5%92%8C%E5%AE%9E%E8%B7%B5/"/>
    <id>http://webbhou.github.io/2022/11/02/%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E5%92%8C%E5%AE%9E%E8%B7%B5/</id>
    <published>2022-11-02T09:45:34.000Z</published>
    <updated>2025-04-08T06:14:49.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是微前端？"><a href="#什么是微前端？" class="headerlink" title="什么是微前端？"></a>什么是微前端？</h2><p>微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。微前端借鉴了微服务的架构理念，将一个庞大的前端应用拆分为多个独立灵活的小型应用，每个应用都可以独立开发、独立运行、独立部署，再将这些小型应用联合为一个完整的应用。微前端既可以将多个项目融合为一，又可以减少项目之间的耦合，提升项目扩展性，相比一整块的前端仓库，微前端架构下的前端仓库倾向于更小更灵活。</p><h2 id="微前端的特性？"><a href="#微前端的特性？" class="headerlink" title="微前端的特性？"></a>微前端的特性？</h2><p>1 技术栈无关 主框架不限制接入应用的技术栈，子应用可自主选择技术栈</p><p>2 独立开发&#x2F;部署 各个团队之间仓库独立，单独部署，互不依赖</p><p>3 增量升级 当一个应用庞大之后，技术升级或重构相当麻烦，而微应用具备渐进式升级的特性</p><p>4 独立运行时 微应用之间运行时互不依赖，有独立的状态管理</p><p>5 提升效率 应用越庞大，越难以维护，协作效率越低下。微应用可以很好拆分，提升效率</p><h2 id="如何实现微前端？"><a href="#如何实现微前端？" class="headerlink" title="如何实现微前端？"></a>如何实现微前端？</h2><p>微前端的方案目前有以下几种类型：基于 iframe 完全隔离的方案，基于 single-spa 路由劫持方案，京东 micro-app 方案，阿里的qiankun框架。我们的店长后台admin基于qiankun实现，以下将介绍qiankun用法。<a href="https://qiankun.umijs.org/zh/guide">https://qiankun.umijs.org/zh/guide</a> (qiankun官网地址)</p><h3 id="qiankun-的核心设计理念"><a href="#qiankun-的核心设计理念" class="headerlink" title="qiankun 的核心设计理念"></a>qiankun 的核心设计理念</h3><p>1 简单</p><p>由于主应用微应用都能做到技术栈无关，qiankun 对于用户而言只是一个类似 jQuery 的库，你需要调用几个 qiankun 的 API 即可完成应用的微前端改造。同时由于 qiankun 的 HTML entry 及沙箱的设计，使得微应用的接入像使用 iframe 一样简单。</p><p>2 解耦&#x2F;技术栈无关</p><p>微前端的核心目标是将巨石应用拆解成若干可以自治的松耦合微应用，而 qiankun 的诸多设计均是秉持这一原则，如 HTML entry、沙箱、应用间通信等。这样才能确保微应用真正具备 独立开发、独立运行 的能力。</p><h3 id="qiankun特性"><a href="#qiankun特性" class="headerlink" title="qiankun特性"></a>qiankun特性</h3><p>1 基于 single-spa 封装，提供了更加开箱即用的 API。</p><p>2 技术栈无关，任意技术栈的应用均可 使用&#x2F;接入，不论是 React&#x2F;Vue&#x2F;Angular&#x2F;JQuery 还是其他等框架。</p><p>3 HTML Entry 接入方式，让你接入微应用像使用 iframe 一样简单。</p><p>4 样式隔离，确保微应用之间样式互相不干扰。</p><p>5 JS 沙箱，确保微应用之间 全局变量&#x2F;事件 不冲突。</p><p>6 资源预加载，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度。</p><p>7 umi 插件，提供了 @umijs&#x2F;plugin-qiankun 供 umi 应用一键切换成微前端架构系统。</p><h3 id="快速使用qiankun？"><a href="#快速使用qiankun？" class="headerlink" title="快速使用qiankun？"></a>快速使用qiankun？</h3><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="基于路由配置api"><a href="#基于路由配置api" class="headerlink" title="基于路由配置api"></a>基于路由配置api</h4><h4 id="1-registerMicroApps"><a href="#1-registerMicroApps" class="headerlink" title="1.registerMicroApps"></a>1.registerMicroApps</h4><p>注册微应用的基础配置信息。当浏览器 url 发生变化时，会自动检查每一个微应用注册的 activeRule 规则，符合规则的应用将会被自动激活。</p><p>registerMicroApps(apps(Array<RegistrableApp> - 必选，微应用的一些注册信息), lifeCycles? (可选，全局的微应用生命周期钩子))</p><h4 id="2-start"><a href="#2-start" class="headerlink" title="2.start"></a>2.start</h4><p>启动 qiankun。</p><p>start(opts? (Options 可选))</p><h4 id="3-setDefaultMountApp-appLink-string-必选"><a href="#3-setDefaultMountApp-appLink-string-必选" class="headerlink" title="3.setDefaultMountApp(appLink(string - 必选))"></a>3.setDefaultMountApp(appLink(string - 必选))</h4><p>设置主应用启动后默认进入的微应用。</p><h4 id="4-runAfterFirstMounted-effect-void-必选"><a href="#4-runAfterFirstMounted-effect-void-必选" class="headerlink" title="4.runAfterFirstMounted(effect (() &#x3D;&gt; void - 必选))"></a>4.runAfterFirstMounted(effect (() &#x3D;&gt; void - 必选))</h4><p>第一个微应用 mount 后需要调用的方法，比如开启一些监控或者埋点脚本。</p><h4 id="手动加载微应用"><a href="#手动加载微应用" class="headerlink" title="手动加载微应用"></a>手动加载微应用</h4><p>第一个微应用 mount 后需要调用的方法，比如开启一些监控或者埋点脚本。注意：通常这种场景下微应用是一个不带路由的可独立运行的业务组件。 微应用不宜拆分过细，建议按照业务域来做拆分。业务关联紧密的功能单元应该做成一个微应用，反之关联不紧密的可以考虑拆分成多个微应用。 一个判断业务关联是否紧密的标准：看这个微应用与其他微应用是否有频繁的通信需求。如果有可能说明这两个微应用本身就是服务于同一个业务场景，合并成一个微应用可能会更合适。</p><h4 id="5-loadMicroApp-app-（必选，微应用的基础信息）-configuration-（可选，微应用的配置信息）"><a href="#5-loadMicroApp-app-（必选，微应用的基础信息）-configuration-（可选，微应用的配置信息）" class="headerlink" title="5.loadMicroApp(app （必选，微应用的基础信息）, configuration?（可选，微应用的配置信息）)"></a>5.loadMicroApp(app （必选，微应用的基础信息）, configuration?（可选，微应用的配置信息）)</h4><p>返回值 - MicroApp - 微应用实例</p><p>手动加载一个微应用。</p><p>如果需要能支持主应用手动 update 微应用，需要微应用 entry 再多导出一个 update 钩子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export async function mount(props) &#123;</span><br><span class="line">  renderApp(props);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 增加 update 钩子以便主应用手动更新微应用</span><br><span class="line">export async function update(props) &#123;</span><br><span class="line">  renderPatch(props);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-prefetchApps-apps-（必选-预加载的应用列表）-importEntryOpts-（可选-加载配置）"><a href="#6-prefetchApps-apps-（必选-预加载的应用列表）-importEntryOpts-（可选-加载配置）" class="headerlink" title="6.prefetchApps(apps （必选 - 预加载的应用列表）, importEntryOpts? （可选 - 加载配置）)"></a>6.prefetchApps(apps （必选 - 预加载的应用列表）, importEntryOpts? （可选 - 加载配置）)</h3><p>手动预加载指定的微应用静态资源。仅手动加载微应用场景需要，基于路由自动激活场景直接配置 prefetch 属性即可。</p><h4 id="7-addErrorHandler-removeErrorHandler"><a href="#7-addErrorHandler-removeErrorHandler" class="headerlink" title="7.addErrorHandler&#x2F;removeErrorHandler"></a>7.addErrorHandler&#x2F;removeErrorHandler</h4><p>addGlobalUncaughtErrorHandler(handler (…args: any[]) &#x3D;&gt; void - 必选）)</p><p>添加全局的未捕获异常处理器。</p><p>removeGlobalUncaughtErrorHandler(handler （(…args: any[]) &#x3D;&gt; void - 必选）)</p><p>移除全局的未捕获异常处理器。</p><h4 id="8-initGlobalState-state-Record-必选"><a href="#8-initGlobalState-state-Record-必选" class="headerlink" title="8.initGlobalState(state (Record&lt;string, any&gt; - 必选))"></a>8.initGlobalState(state (Record&lt;string, any&gt; - 必选))</h4><p>定义全局状态，并返回通信方法，建议在主应用使用，微应用通过 props 获取通信方法。</p><p>e.g</p><p>主应用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; initGlobalState, MicroAppStateActions &#125; from &#x27;qiankun&#x27;;</span><br><span class="line"></span><br><span class="line">// 初始化 state</span><br><span class="line">const actions: MicroAppStateActions = initGlobalState(state);</span><br><span class="line"></span><br><span class="line">actions.onGlobalStateChange((state, prev) =&gt; &#123;</span><br><span class="line">  // state: 变更后的状态; prev 变更前的状态</span><br><span class="line">  console.log(state, prev);</span><br><span class="line">&#125;);</span><br><span class="line">actions.setGlobalState(state);</span><br><span class="line">actions.offGlobalStateChange();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>微应用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 从生命周期 mount 中获取通信方法，使用方式和 master 一致</span><br><span class="line">export function mount(props) &#123;</span><br><span class="line">  props.onGlobalStateChange((state, prev) =&gt; &#123;</span><br><span class="line">    // state: 变更后的状态; prev 变更前的状态</span><br><span class="line">    console.log(state, prev);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  props.setGlobalState(state);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="主应用"><a href="#主应用" class="headerlink" title="主应用"></a>主应用</h3><p>e.g:</p><ol><li>安装 qiankun</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add qiankun # 或者 npm i qiankun -S</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>在主应用中注册微应用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const apps = [</span><br><span class="line">    &#123;</span><br><span class="line">        name: &#x27;adminApp&#x27;,</span><br><span class="line">        entry: isProduction ? &#x27;/web/childrens/admin/&#x27; : &#x27;//localhost:7001/html/&#x27;,</span><br><span class="line">        container: &#x27;#manage-view&#x27;,</span><br><span class="line">        activeRule: &#x27;/web/admin/&#x27;,</span><br><span class="line">        props: &#123; BrowserHistory &#125;,</span><br><span class="line">        loader: (loading) =&gt; &#123;</span><br><span class="line">            window.globalLoadingStatus = loading</span><br><span class="line">        &#125;</span><br><span class="line">   ]</span><br><span class="line">  import &#123; registerMicroApps, start &#125; from &#x27;qiankun&#x27;</span><br><span class="line">  export const registerApp = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;启动qiankun&#x27;)</span><br><span class="line">    registerMicroApps(apps)</span><br><span class="line">  &#125;</span><br><span class="line"> export default start</span><br></pre></td></tr></table></figure><p>当微应用信息注册完之后，一旦浏览器的 url 发生变化，便会自动触发 qiankun 的匹配逻辑，所有 activeRule 规则匹配上的微应用就会被插入到指定的 container 中，同时依次调用微应用暴露出的生命周期钩子。如果微应用不是直接跟路由关联的时候，你也可以选择手动加载微应用的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; loadMicroApp &#125; from &#x27;qiankun&#x27;;</span><br><span class="line">   loadMicroApp(&#123;</span><br><span class="line">       name: &#x27;app&#x27;,</span><br><span class="line">       entry: &#x27;//localhost:7100&#x27;,</span><br><span class="line">      container: &#x27;#yourContainer&#x27;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="微应用"><a href="#微应用" class="headerlink" title="微应用"></a>微应用</h3><p>微应用不需要额外安装任何其他依赖即可接入 qiankun 主应用。</p><ol><li>导出相应的生命周期钩子</li></ol><p>微应用需要在自己的入口 js (通常就是你配置的 webpack 的 entry js) 导出 bootstrap、mount、unmount 三个生命周期钩子，以供主应用在适当的时机调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * bootstrap 只会在微应用初始化的时候调用一次，下次微应用重新进入时会直接调用 mount 钩子，不会再重复触发 bootstrap。</span><br><span class="line"> * 通常我们可以在这里做一些全局变量的初始化，比如不会在 unmount 阶段被销毁的应用级别的缓存等。</span><br><span class="line"> */</span><br><span class="line">export async function bootstrap() &#123;</span><br><span class="line">  console.log(&#x27;react app bootstraped&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 应用每次进入都会调用 mount 方法，通常我们在这里触发应用的渲染方法</span><br><span class="line"> */</span><br><span class="line">export async function mount(props) &#123;</span><br><span class="line">  ReactDOM.render(&lt;App /&gt;, props.container ? props.container.querySelector(&#x27;#root&#x27;) : document.getElementById(&#x27;root&#x27;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 应用每次 切出/卸载 会调用的方法，通常在这里我们会卸载微应用的应用实例</span><br><span class="line"> */</span><br><span class="line">export async function unmount(props) &#123;</span><br><span class="line">  ReactDOM.unmountComponentAtNode(</span><br><span class="line">    props.container ? props.container.querySelector(&#x27;#root&#x27;) : document.getElementById(&#x27;root&#x27;),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 可选生命周期钩子，仅使用 loadMicroApp 方式加载微应用时生效</span><br><span class="line"> */</span><br><span class="line">export async function update(props) &#123;</span><br><span class="line">  console.log(&#x27;update props&#x27;, props);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>配置微应用的打包工具</li></ol><p>webpack:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const packageName = require(&#x27;./package.json&#x27;).name;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    library: `$&#123;packageName&#125;-[name]`,</span><br><span class="line">    libraryTarget: &#x27;umd&#x27;,</span><br><span class="line">    jsonpFunction: `webpackJsonp_$&#123;packageName&#125;`,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是微前端？&quot;&gt;&lt;a href=&quot;#什么是微前端？&quot; class=&quot;headerlink&quot; title=&quot;什么是微前端？&quot;&gt;&lt;/a&gt;什么是微前端？&lt;/h2&gt;&lt;p&gt;微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。微前端
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue响应式原理实现剖析</title>
    <link href="http://webbhou.github.io/2022/03/31/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0%E5%89%96%E6%9E%90/"/>
    <id>http://webbhou.github.io/2022/03/31/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0%E5%89%96%E6%9E%90/</id>
    <published>2022-03-31T02:18:05.000Z</published>
    <updated>2025-04-08T06:14:49.337Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://webbHou.github.io/tags/vue/"/>
    
      <category term="响应式" scheme="http://webbHou.github.io/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Rust入门和实践</title>
    <link href="http://webbhou.github.io/2022/03/03/rust%E5%85%A5%E9%97%A8%E5%92%8C%E5%AE%9E%E8%B7%B5/"/>
    <id>http://webbhou.github.io/2022/03/03/rust%E5%85%A5%E9%97%A8%E5%92%8C%E5%AE%9E%E8%B7%B5/</id>
    <published>2022-03-03T09:16:51.000Z</published>
    <updated>2025-04-08T06:14:49.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是-Rust"><a href="#什么是-Rust" class="headerlink" title="什么是 Rust"></a>什么是 Rust</h4><p>rust 是一个静态的编译型语言，在语法，机制上都跟 C&#x2F;C++很像，<strong>特点就是快，因此非常适合做计算密集型的东西</strong></p><p>目前很多前端工程化工具如 webpack、babel 都是使用 js 来实现的，但 JS 这种动态的解释性+单线程语言，在性能上是天然不足的，有局限性。</p><p>所以现在很多工具从底层实现来解决这一问题，比如 esbuild 才有 go 语言。根据 Rust 的特点，在前端工程化领域现在越来越被需要。</p><p>另外 webassembly 对 rust 支持友好，在一些计算密集型的项目中，比如在线文档，云 IDE，可视化领域都非常有潜力。所以在前端生态进步的未来，有可能大有作为。</p><h4 id="swc"><a href="#swc" class="headerlink" title="swc"></a>swc</h4><p>swc 是目前第一个使用 rust 语言实现的编译工具，用来替代 babel，其编译的速度比 babel 快了 10 倍不止。</p><h4 id="Rust-入门"><a href="#Rust-入门" class="headerlink" title="Rust 入门"></a>Rust 入门</h4><h5 id="Cargo-命令"><a href="#Cargo-命令" class="headerlink" title="Cargo 命令"></a>Cargo 命令</h5><p>cargo: 类似于 node 的 npm，是 rust 的包管理工具 常用命令：</p><ul><li>cargo add 添加依赖</li><li>cargo new 新建项目</li><li>cargo build 可以构建项目 –release 来优化编译项目</li><li>cargo run 可以运行项目</li><li>cargo test 可以测试项目</li><li>cargo doc 可以为项目构建文档</li><li>cargo publish 可以将库发布到 crates.io。</li><li>cargo check 快速检查代码确保其可编译</li></ul><h5 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h5><ul><li>main.rs 入口文件</li><li>rustc -&gt; node 可执行.rs 文件</li><li>rustup -&gt; nvm 版本管理</li><li>cargo -&gt; npm 包管理</li><li>cargo.toml -&gt; package.json 包信息管理</li><li>target -&gt; dist 打包后目录</li></ul><h5 id="常用语法和概念"><a href="#常用语法和概念" class="headerlink" title="常用语法和概念"></a>常用语法和概念</h5><p>变量和可变性：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;  <span class="comment">// 一旦创建不可修改 可避免不可知错误</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span> = <span class="number">5</span>; <span class="comment">// 变量名前加mut使可变  也告知了后续会对变量修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span>:&amp;<span class="type">str</span> =  <span class="symbol">&#x27;hell</span>p<span class="string">&#x27;;  // 重新声明可以覆盖原变量和类型</span></span><br></pre></td></tr></table></figure><p>常量：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量始终不可变，需定义类型</span></span><br><span class="line"><span class="comment">// 命名约定是全部字母都使用大写，并使用下划线分隔单词</span></span><br><span class="line"><span class="keyword">const</span> THREE_HOURS_IN_SECONDS: <span class="type">u32</span> = <span class="number">60</span> * <span class="number">60</span> * <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>作用域：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = x + <span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">x</span> = x * <span class="number">2</span></span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;the number of seconds &#123;&#125;&quot;</span>,x) <span class="comment">//12</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;the number of seconds &#123;&#125;&quot;</span>,x) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>数据类型-标量类型：</p><ul><li>整型： 有符号 i8 i16 i32 i64 i28 范围-(2n - 1) ~ 2n - 1 - 1 无符号 u8 u16 u32 u64 u128 范围 0 ~ 2n - 1</li><li>浮点型：皆带符号可以取负值 f32 f64(默认，现代计算器无差别)</li><li>布尔型：bool 声明 true 和 false</li><li>字符：char 4 个字节</li></ul><p>数据类型-复合类型：</p><ul><li>元祖：多个类型值的组合，长度固定，声明后无法更改</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>, <span class="type">f64</span>, <span class="type">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 解构取值</span></span><br><span class="line"><span class="keyword">let</span> (x, y, z) = tup;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y); <span class="comment">// 6.4</span></span><br><span class="line"><span class="comment">// 索引访问</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">five_hundred</span> = tup.<span class="number">0</span>; <span class="comment">// 500</span></span><br></pre></td></tr></table></figure><ul><li>数组：单个类型值的组合 长度固定不可更改</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明类型为整型长度为5</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span>:[<span class="type">u32</span>;<span class="number">5</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">// 指定每个元素初始值3</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">3</span>; <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 索引访问 超出访问报错</span></span><br><span class="line">x[<span class="number">0</span>] <span class="comment">// 3</span></span><br><span class="line">x[<span class="number">6</span>] <span class="comment">//error</span></span><br></pre></td></tr></table></figure><p>函数：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line">        x + <span class="number">1</span> <span class="comment">// 无分号表示非语句 可以返回绑定给y</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y); <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">five</span>(x:<span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123; <span class="comment">// 指定参数和返回值类型</span></span><br><span class="line">    x+<span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制流：</p><ul><li>if</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">num</span> = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 条件必须是 bool 值</span></span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">2</span> &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;condition was true&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;condition was false&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">condition</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 返回值都必须是相同类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">number</span> = <span class="keyword">if</span> condition &#123; <span class="number">5</span> &#125; <span class="keyword">else</span> &#123; <span class="number">6</span> &#125;;</span><br></pre></td></tr></table></figure><ul><li>loop</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">count</span> = <span class="number">0</span>;</span><br><span class="line"><span class="symbol">&#x27;counting_up</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;loop&quot;</span>);</span><br><span class="line">    num += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">5</span> &#123;</span><br><span class="line">      <span class="keyword">break</span>; <span class="comment">// 跳出循环</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> num == <span class="number">2</span> &#123;</span><br><span class="line">      <span class="keyword">continue</span>; <span class="comment">// 跳过这个循环到下一个循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">2</span> &#123;</span><br><span class="line">      <span class="keyword">break</span> <span class="symbol">&#x27;counting_u</span>p<span class="string">&#x27;; // 跳出外层循环</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    println!(&quot;num is &#123;&#125;&quot;,num);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  count += 1;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let mut counter = 0;</span></span><br><span class="line"><span class="string">let result = loop &#123;</span></span><br><span class="line"><span class="string">    counter += 1;</span></span><br><span class="line"><span class="string">    if counter == 10 &#123;</span></span><br><span class="line"><span class="string">        break counter * 2; // 循环返回赋值</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure><ul><li>while</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">number</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> number != <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>, number);</span><br><span class="line">    number -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> a &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;the value is: &#123;&#125;&quot;</span>, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有权：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String 的底层由指针、长度和容量构成 指针指向内存数据</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = s1; <span class="comment">// s2只会拷贝它的指针、长度和容量 而不会拷贝指针指向数据</span></span><br><span class="line"><span class="comment">// s2被赋值后 此时s1会失效 rust称之为移动 s2离开作用域时内存会被释放</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错  rust的内存回收机制为 当变量离开作用域被释放</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;, world!&quot;</span>, s1);</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深度复制 String</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = s1.<span class="title function_ invoke__">clone</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s1 = &#123;&#125;, s2 = &#123;&#125;&quot;</span>, s1, s2);</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x; <span class="comment">// 整型类型会直接存储在栈上， x不会失效</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;, y = &#123;&#125;&quot;</span>, x, y);</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将值传递给函数在语义上与给变量赋值相似</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);  <span class="comment">// s 进入作用域</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">l</span> = <span class="title function_ invoke__">takes_ownership</span>(s);   <span class="comment">// s 的值移动到函数里 ...</span></span><br><span class="line">                  <span class="comment">// ... 所以到这里不再有效 使用s会报错</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;      <span class="comment">// x 进入作用域</span></span><br><span class="line">  <span class="title function_ invoke__">makes_copy</span>(x);  <span class="comment">// x 应该移动函数里，</span></span><br><span class="line">                  <span class="comment">// 但 i32 是 Copy 的，所以在后面可继续使用 x</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">gives_ownership</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;           <span class="comment">// gives_ownership 将返回值移动给</span></span><br><span class="line">                                           <span class="comment">// 调用它的函数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">some_string</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;yours&quot;</span>); <span class="comment">// some_string 进入作用域</span></span><br><span class="line"></span><br><span class="line">  some_string                              <span class="comment">// 返回 some_string 并移出给调用的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引用：&amp; 允许你使用值但不获取其所有权</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用而非移动</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">calculate_length</span>(&amp;s1); <span class="comment">// 引用 创建一个指向值s1的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>, s1, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">calculate_length</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">    s.<span class="title function_ invoke__">len</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可变和不可变引用</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = &amp;x;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = &amp;x;</span><br><span class="line"><span class="comment">//一个不可变引用的作用域从声明的地方开始一直持续到最后一次使用为止</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s1&#123;&#125;,s1&#123;&#125;&quot;</span>, s1, s2); <span class="comment">// 此后作用域被释放，所以在此后可以声明可变引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s3</span> = &amp;<span class="keyword">mut</span> x; <span class="comment">// 可变引用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>悬垂引用：可能其指向的内存可能已经被释放或者移动 保留的指针就会生成一个悬垂指针</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">reference_to_nothing</span> = <span class="title function_ invoke__">dangle</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">dangle</span>() <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为s被释放 指向被移动</span></span><br><span class="line">    &amp;s <span class="comment">// 此后s被释放 &amp;s留的指针就会生成一个悬垂指针错误</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">no_danger</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">  s <span class="comment">// 所有权被转移出去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>slice 引用</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="comment">// 部分引用</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span> = &amp;s[<span class="number">0</span>..<span class="number">5</span>]; <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="variable">arr2</span> = &amp;arr[<span class="number">1</span>..<span class="number">2</span>] <span class="comment">// [2,3]</span></span><br></pre></td></tr></table></figure><p>结构体：可以定义和包装多种数据的组合</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    active: <span class="type">bool</span>,</span><br><span class="line">    username: <span class="type">String</span>,</span><br><span class="line">    email: <span class="type">String</span>,</span><br><span class="line">    sign_in_count: <span class="type">u64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用结构体-结构体实例</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">user1</span> = User &#123;</span><br><span class="line">  email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someone@example.com&quot;</span>),</span><br><span class="line">  username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;someusername123&quot;</span>),</span><br><span class="line">  active: <span class="literal">true</span>,</span><br><span class="line">  sign_in_count: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">user2</span> = User &#123;</span><br><span class="line">    email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;another@example.com&quot;</span>),</span><br><span class="line">    ..user1 <span class="comment">// 指定剩余未声明字段值与user1一致 但因为user1中未实现copy类型被移动了(类似=赋值) 所以user1会失效</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Color</span>(<span class="type">i32</span>, <span class="type">i32</span>, <span class="type">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">black</span> = <span class="title function_ invoke__">Color</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123; <span class="comment">//impl 实现结构体并定义 area 方法</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123; <span class="comment">// 参数为Rectangle实例</span></span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以多个impl实现</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">can_hold</span>(&amp;<span class="keyword">self</span>, other: &amp;Rectangle) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123; <span class="comment">//也可接受其他参数</span></span><br><span class="line">        <span class="keyword">self</span>.width &gt; other.width &amp;&amp; <span class="keyword">self</span>.height &gt; other.height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect1</span> = Rectangle &#123;</span><br><span class="line">        width: <span class="number">30</span>,</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rect2</span> = Rectangle &#123;</span><br><span class="line">        width: <span class="number">30</span>,</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot;The area of the rectangle is &#123;&#125; square pixels.&quot;</span>,</span><br><span class="line">        rect1.<span class="title function_ invoke__">area</span>() <span class="comment">// 只引用值</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Can rect1 hold rect2? &#123;&#125;&quot;</span>, rect1.<span class="title function_ invoke__">area</span>(&amp;rect2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是-Rust&quot;&gt;&lt;a href=&quot;#什么是-Rust&quot; class=&quot;headerlink&quot; title=&quot;什么是 Rust&quot;&gt;&lt;/a&gt;什么是 Rust&lt;/h4&gt;&lt;p&gt;rust 是一个静态的编译型语言，在语法，机制上都跟 C&amp;#x2F;C++很像，&lt;stron
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="Rust" scheme="http://webbHou.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Remach学习和实践</title>
    <link href="http://webbhou.github.io/2022/01/05/Remach%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%AE%9E%E8%B7%B5/"/>
    <id>http://webbhou.github.io/2022/01/05/Remach%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%AE%9E%E8%B7%B5/</id>
    <published>2022-01-05T03:02:42.000Z</published>
    <updated>2025-04-08T06:14:49.333Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是rematch"><a href="#什么是rematch" class="headerlink" title="什么是rematch"></a>什么是rematch</h4><h4 id="为什么不是redux"><a href="#为什么不是redux" class="headerlink" title="为什么不是redux"></a>为什么不是redux</h4><p>在redux中状态管理的流程如下:<br>1.首先需要页面发起一个dispatch函数，接受一个action参数，<br>2.state中定义这个action 并导入都页面中<br>3.action中对异步或逻辑进行处理，然后再dispatch一个action<br>4.定义reducer然后 收集action，并处理<br>5.createStore，对所有的reducer进行合并处理，并添加中间件</p><p>所有因为redux操作的复杂性，很多重复的步骤可以省略，rematch就是对redux进行了二次封装，借鉴了dva的风格重新优化了流程，多余的action types，action creators，switch 语句或者thunks。使得我们开发时减少了很多重复的步骤和流程。</p><p>一个常见的rematch如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; init &#125; <span class="keyword">from</span> <span class="string">&#x27;@rematch/core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// model</span></span><br><span class="line"><span class="keyword">const</span> count = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">upBy</span>: <span class="function">(<span class="params">state, payload</span>) =&gt;</span> state + payload</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">effects</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">add</span>(<span class="params">payload, rootState</span>) &#123;</span><br><span class="line">      <span class="comment">// await 异步操作</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">upBy</span>(payload)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化store</span></span><br><span class="line"><span class="title function_">init</span>(&#123;</span><br><span class="line">  <span class="attr">models</span>: &#123; count &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">props.<span class="property">dispatch</span>.<span class="property">count</span>.<span class="title function_">upBy</span>(routerInfo)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是rematch&quot;&gt;&lt;a href=&quot;#什么是rematch&quot; class=&quot;headerlink&quot; title=&quot;什么是rematch&quot;&gt;&lt;/a&gt;什么是rematch&lt;/h4&gt;&lt;h4 id=&quot;为什么不是redux&quot;&gt;&lt;a href=&quot;#为什么不是redux&quot;
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
      <category term="rematch" scheme="http://webbHou.github.io/tags/rematch/"/>
    
  </entry>
  
  <entry>
    <title>H5和原生通信的方式及机制</title>
    <link href="http://webbhou.github.io/2021/10/14/H5%E5%92%8C%E5%8E%9F%E7%94%9F%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F%E5%8F%8A%E6%9C%BA%E5%88%B6/"/>
    <id>http://webbhou.github.io/2021/10/14/H5%E5%92%8C%E5%8E%9F%E7%94%9F%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F%E5%8F%8A%E6%9C%BA%E5%88%B6/</id>
    <published>2021-10-14T08:04:23.000Z</published>
    <updated>2025-04-08T06:14:49.332Z</updated>
    
    <content type="html"><![CDATA[<h5 id="H5和原生通信的几种方式"><a href="#H5和原生通信的几种方式" class="headerlink" title="H5和原生通信的几种方式"></a>H5和原生通信的几种方式</h5><ul><li>注入API: 原生App通过WebView提供的接口，把通信的方法等注入到JavaScript的window对象中，供JavaScript调用，实现通信。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ios UIWebView</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">postBridgeMessage</span>(<span class="string">&quot;参数&quot;</span>) </span><br><span class="line"><span class="comment">// ios WKWebView</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">webkit</span>.<span class="property">messageHandlers</span>.<span class="property">execute</span>.<span class="title function_">postMessage</span>(<span class="string">&quot;参数&quot;</span>) <span class="comment">//execute：原生定义方法</span></span><br></pre></td></tr></table></figure><ul><li>拦截Scheme：<br><strong>URL SCHEME是一种类似于url的链接，是为了方便app直接互相调用设计的，形式和普通的url近似，主要区别是protocol和host一般是自定义的。</strong><br>Web 端通过某种方式（例如 iframe.src）发送 URL Scheme 请求，之后 Native 拦截到请求并根据 URL SCHEME（包括所带的参数）进行相关操作。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu</span>:<span class="comment">//hy/action?arg=1&amp;callback=fn //protocol 是 baidu host 则是 hy。</span></span><br></pre></td></tr></table></figure><p>Native接收原生消息流程：接收到 JavaScript 消息 &#x3D;&gt; 解析参数，拿到 bridgeName、data 和 callbackId &#x3D;&gt; 根据 bridgeName 找到功能方法，以 data 为参数执行 &#x3D;&gt; 执行返回值和 callbackId 一起回传前端。</p><h5 id="Native-调用-JavaScript-的方式"><a href="#Native-调用-JavaScript-的方式" class="headerlink" title="Native 调用 JavaScript 的方式"></a>Native 调用 JavaScript 的方式</h5><p>Native 调用 JavaScript 较为简单，直接执行拼接好的JavaScript代码即可。需要调用JavaScript的方法注入在全局的window上。</p><h5 id="JSBridge-的引用方式"><a href="#JSBridge-的引用方式" class="headerlink" title="JSBridge 的引用方式"></a>JSBridge 的引用方式</h5><ul><li>JavaScript端注入: 存在于前端，可直接执行</li><li>原生端注入：注入方式和 Native 调用 JavaScript 类似，直接执行桥的全部代码，注入时机不缺点，有可能调用时未注入。</li></ul><h5 id="JSBridge-封装实现"><a href="#JSBridge-封装实现" class="headerlink" title="JSBridge 封装实现"></a>JSBridge 封装实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bridge = &#123;</span><br><span class="line">  <span class="comment">// 前端调用</span></span><br><span class="line">  <span class="attr">invoke</span>: <span class="function">(<span class="params">bridgeName,data, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fnID = <span class="title function_">getId</span>(); <span class="comment">//唯一值</span></span><br><span class="line">    <span class="variable language_">window</span>.[fnID] = callback</span><br><span class="line">    <span class="comment">//句柄解析  bridgeName 原生定义方法</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">webkit</span>.<span class="property">messageHandlers</span>.[bridgeName].<span class="title function_">postMessage</span>(&#123; data, <span class="attr">callback</span>: fnID &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 原生接收</span></span><br><span class="line">  <span class="attr">receive</span>: <span class="function">(<span class="params">&#123; data, callback &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行bridgeName方法</span></span><br><span class="line">    <span class="comment">// callback(bridgeName执行结果)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;H5和原生通信的几种方式&quot;&gt;&lt;a href=&quot;#H5和原生通信的几种方式&quot; class=&quot;headerlink&quot; title=&quot;H5和原生通信的几种方式&quot;&gt;&lt;/a&gt;H5和原生通信的几种方式&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;注入API: 原生App通过WebView提供的
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端水印实现方式</title>
    <link href="http://webbhou.github.io/2021/08/26/%E5%89%8D%E7%AB%AF%E6%B0%B4%E5%8D%B0%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://webbhou.github.io/2021/08/26/%E5%89%8D%E7%AB%AF%E6%B0%B4%E5%8D%B0%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</id>
    <published>2021-08-26T03:19:38.000Z</published>
    <updated>2025-04-08T06:14:49.339Z</updated>
    
    <content type="html"><![CDATA[<h4 id="重复dom覆盖和canvas背景图"><a href="#重复dom覆盖和canvas背景图" class="headerlink" title="重复dom覆盖和canvas背景图"></a>重复dom覆盖和canvas背景图</h4><p>这两种都是通过css的方式给图片上层覆盖一层水印，容易被破坏。</p><h4 id="Canvas写入方式"><a href="#Canvas写入方式" class="headerlink" title="Canvas写入方式"></a>Canvas写入方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">__picWM</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  url = <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="params">  textAlign = <span class="string">&#x27;center&#x27;</span>,</span></span><br><span class="line"><span class="params">  textBaseline = <span class="string">&#x27;middle&#x27;</span>,</span></span><br><span class="line"><span class="params">  font = <span class="string">&quot;20px Microsoft Yahei&quot;</span>,</span></span><br><span class="line"><span class="params">  fillStyle = <span class="string">&#x27;rgba(184, 184, 184, 0.8)&#x27;</span>,</span></span><br><span class="line"><span class="params">  content = <span class="string">&#x27;水印&#x27;</span>,</span></span><br><span class="line"><span class="params">  cb = <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  textX = <span class="number">100</span>,</span></span><br><span class="line"><span class="params">  textY = <span class="number">30</span></span></span><br><span class="line"><span class="params">&#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">  img.<span class="property">src</span> = url;</span><br><span class="line">  img.<span class="property">crossOrigin</span> = <span class="string">&#x27;anonymous&#x27;</span>;</span><br><span class="line">  img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">        canvas.<span class="property">width</span> = img.<span class="property">width</span>;</span><br><span class="line">        canvas.<span class="property">height</span> = img.<span class="property">height</span>;</span><br><span class="line">        <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        ctx.<span class="property">textAlign</span> = textAlign;</span><br><span class="line">        ctx.<span class="property">textBaseline</span> = textBaseline;</span><br><span class="line">        ctx.<span class="property">font</span> = font;</span><br><span class="line">        ctx.<span class="property">fillStyle</span> = fillStyle;</span><br><span class="line">        ctx.<span class="title function_">fillText</span>(content, img.<span class="property">width</span> - textX, img.<span class="property">height</span> - textY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> base64Url = canvas.<span class="title function_">toDataURL</span>();</span><br><span class="line">        cb &amp;&amp; <span class="title function_">cb</span>(base64Url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">__picWM</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;水印&#x27;</span>,</span><br><span class="line">  <span class="attr">ca</span>: <span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Svg方式"><a href="#Svg方式" class="headerlink" title="Svg方式"></a>Svg方式</h4><h4 id="隐形水印"><a href="#隐形水印" class="headerlink" title="隐形水印"></a>隐形水印</h4><p>计算出图片的rgb值，然后进行微小的改变生成水印字体色，然后写入水印。输出后肉眼看不出水印，但解密处理后可以看到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;重复dom覆盖和canvas背景图&quot;&gt;&lt;a href=&quot;#重复dom覆盖和canvas背景图&quot; class=&quot;headerlink&quot; title=&quot;重复dom覆盖和canvas背景图&quot;&gt;&lt;/a&gt;重复dom覆盖和canvas背景图&lt;/h4&gt;&lt;p&gt;这两种都是通过css
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端微服务的现在及未来的一些思考</title>
    <link href="http://webbhou.github.io/2021/07/14/%E5%89%8D%E7%AB%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%8E%B0%E5%9C%A8%E5%8F%8A%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://webbhou.github.io/2021/07/14/%E5%89%8D%E7%AB%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%8E%B0%E5%9C%A8%E5%8F%8A%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</id>
    <published>2021-07-14T02:46:47.000Z</published>
    <updated>2025-04-08T06:14:49.339Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="前端开发" scheme="http://webbHou.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="微服务" scheme="http://webbHou.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>前端常见异常性能监控的几种方式</title>
    <link href="http://webbhou.github.io/2020/12/14/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://webbhou.github.io/2020/12/14/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2020-12-14T06:29:22.000Z</published>
    <updated>2025-04-08T06:14:49.338Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常见的几种监控类型"><a href="#常见的几种监控类型" class="headerlink" title="常见的几种监控类型"></a>常见的几种监控类型</h4><ul><li>用户行为监控</li><li>网站异常监控</li><li>网站性能监控</li></ul><h5 id="用户行为监控"><a href="#用户行为监控" class="headerlink" title="用户行为监控"></a>用户行为监控</h5><p>一般大型的网站为了对产品的体验进行更好的优化和改进，所以会采用监控的方式更细致的对用户行为和习惯进行分析，来收集用户习惯和喜好，进行算法的分析，达到个性化的推送和精准的广告投放。常见方式为前端埋点(打点)上报用户行为。</p><h5 id="网站异常监控"><a href="#网站异常监控" class="headerlink" title="网站异常监控"></a>网站异常监控</h5><p>一般的网站在进行上线前会在不同的环境进行多轮的测试，已保证在大部分情况下该网站运行良好、功能可用。但网络环境错综复杂，测试环境不可能百分百的模拟到，所以我们需要进行对网站的运行异常进行监控，及时的发现问题和解决用户使用的体验。</p><h5 id="网站性能监控"><a href="#网站性能监控" class="headerlink" title="网站性能监控"></a>网站性能监控</h5><p>在互联网刚刚出现的时代，开发人员们只需要保证功能可用即可，但是随着互联网高速的发展，从桌面时代到移动时代，从2g到5g，人们的娱乐的方式在大大的改变，也不会再满足于当初的一张图片加载几十秒、网站打开一直等待的速度。所以我们需要改变，需要对网站进行优化，提升用户体验，否则只能被用户所淘汰。所以就需要对网站的打开时间，响应时间等性能相关进行监控，来分析进行如何更好的优化和改进。</p><h4 id="网站异常监控-1"><a href="#网站异常监控-1" class="headerlink" title="网站异常监控"></a>网站异常监控</h4><p>一个监控系统通常分为四个部分：日志采集、日志存储、统计和分析、报告和警告</p><p>日志采集：一般在本地先做一定的处理，然后上报<br>日志存储：BE收到前端数据后进行处理后进行存储<br>统计和分析：分为机器自动分析和人工分析。机器分析就是根据预设的条件和算法，对日志进行分析和筛选，触发对应的报警。人工就是根据可视化的数据面板，查看日志数据，根据信息，发现异常问题根源。<br>报告和警告：分为告警和预警。告警按照一定的级别自动报警，通过设定的渠道，按照一定的触发规则进行。预警则在异常发生前，提前预判，给出警告。</p><ul><li><p>网站异常的几种类型</p><ul><li>出错：页面展现与预期不符的</li><li>呆滞：操作无响应的现象，局部功能不可用</li><li>损坏：界面出现无法实现操作目的的现象</li><li>假死：界面出现卡顿，无法对任何功能进行使用的现象</li><li>崩溃：应用出现经常性自动退出或无法操作的现象</li></ul></li><li><p>网站异常的原因</p><ul><li>逻辑错误：逻辑判断、js对象操作、事件绑定顺序、调用栈顺序错误</li><li>数据类型错误：错误读取property、使用不存在的方法、函数未传参</li><li>语法出错</li><li>网络错误、服务器500前端未做错误处理</li><li>系统错误：浏览器不兼容、内存不够</li></ul></li><li><p>异常日志采集</p><p>1.采集内容：4W原则：WHO did WHAT and get WHICH exception in WHICH environment?</p><ul><li>用户信息</li><li>行为信息</li><li>异常信息</li><li>环境信息</li></ul><p>2.采集方式</p><ul><li><p>全局捕获：</p><ul><li>全局监听：window.addEventListener(‘error’) &#x2F; window.addEventListener(“unhandledrejection”) &#x2F; document.addEventListener(‘click’) 全局错误上报</li><li>框架级别：全局interceptor进行拦截上报</li><li>全局封装：调用时自动捕获异常</li><li>重写错误监听方法：对onerror重写，使用方法不变也可以捕获，更易使用    js运行错误时触发上报</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">window.onerror = <span class="keyword">function</span>(message, <span class="built_in">source</span>, lineno, colno, error) &#123; ... &#125;</span><br><span class="line">函数参数：</span><br><span class="line">- message：错误信息（字符串）。可用于HTML onerror=<span class="string">&quot;&quot;</span>处理程序中的event。</span><br><span class="line">- <span class="built_in">source</span>：发生错误的脚本URL（字符串）</span><br><span class="line">- lineno：发生错误的行号（数字）打包压缩后的代码根据sourceMap获取</span><br><span class="line">- colno：发生错误的列号（数字）</span><br><span class="line">- error：Error对象</span><br><span class="line">若该函数返回<span class="literal">true</span>，则阻止执行默认事件处理函数，如异常信息不会在console中打印。没有返回值或者返回值为<span class="literal">false</span>的时候，异常信息会在console中打印</span><br></pre></td></tr></table></figure></li></ul></li><li><p>单点捕获：全局捕获的补充，在业务中对单个代码块进行包裹，或者在逻辑中进行打点，实现有针对性的捕获。</p><ul><li>try-catch</li><li>公共的异常收集方法，异常时调用</li><li>高阶函数：对原函数进行包裹，返回结果相同，只是在异常时会捕获异常。</li></ul></li><li><p>异常录制<br>往往有时候有异常信息我们也不足以发现错误的本质，所以我们希望对异常现场进行还原。通过录制，从时间和空间来记录异常发生前到发生的整个过程，方便我们更好的找到问题的根源。就是通过技术手段，对用户行为进行记录，先存储在用户本地进行分析过滤，一段时间内将用户产生的event和action进行上报。当异常发生后，我们从数据库拿到数据，进行行为的模拟，还原异常情景。</p></li><li><p>日志存储：</p><ul><li>前端：由于用户操作频繁，我们不可能实时上报，那无异于自己在对日志服务器做DDos攻击，所以我们需要首先在前端进行一个数据的持久化的存储。然后在前端进行日志整理，根据异常级别进行索引分类，然后决定是否要批量上报还是一次全部上报。</li><li>服务端：一般会通过单独的日志服务器对上报的日志进行接收，然后还需要对日志的安全性、合法性、有效性进行筛选，防止被攻击。再经过处理后进行服务器存储。</li></ul></li><li><p>统计和分析：<br>根据日志的信息，从用户、行为、异常、环境的各个纬度进行分析，进行异常级别的标注。然后进行可视化的展示，方便管理员和开发者及时可是发现问题。</p></li><li><p>报告和警告<br>根据自定义的触发条件，判断是否需要进行告警处理。推送告警信息到微信、邮箱、短信等各种方式。更加高级的是可以生成报表、产生bug工单，极大的提升了错误的处理效率并记录问题。</p></li><li><p>修复异常</p><ul><li>sourceMap方式发现问题的源码位置，防止源码外漏，可以把souceMap文件发布在内网 使用nginx进行控制</li><li>智能修复：严格的数据模型，当数据返回时，进行模型校验</li><li>预警信息：根据异常的规律，当下次该类型异常发生前进行预警，及时修复</li></ul></li><li><p>异常测试：在测试阶段就进行异常操作进行测试，发现异常类型并统计，在实际用户发生时进行预警。</p></li></ul><h5 id="网站性能监控-1"><a href="#网站性能监控-1" class="headerlink" title="网站性能监控"></a>网站性能监控</h5><ul><li>运行时性能：文件级、模块级、函数级、算法级</li><li>网络请求速率</li><li>系统性能</li></ul><h5 id="API-Monitor"><a href="#API-Monitor" class="headerlink" title="API Monitor"></a>API Monitor</h5><ul><li>稳定性监控</li><li>数据格式和类型</li><li>报错监控</li><li>数据准确性监控</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;常见的几种监控类型&quot;&gt;&lt;a href=&quot;#常见的几种监控类型&quot; class=&quot;headerlink&quot; title=&quot;常见的几种监控类型&quot;&gt;&lt;/a&gt;常见的几种监控类型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用户行为监控&lt;/li&gt;
&lt;li&gt;网站异常监控&lt;/li&gt;
&lt;li&gt;网站性能
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>微前端的应用和实践</title>
    <link href="http://webbhou.github.io/2020/12/10/%E5%BE%AE%E5%89%8D%E7%AB%AF%E7%9A%84%E5%BA%94%E7%94%A8%E5%92%8C%E5%AE%9E%E8%B7%B5/"/>
    <id>http://webbhou.github.io/2020/12/10/%E5%BE%AE%E5%89%8D%E7%AB%AF%E7%9A%84%E5%BA%94%E7%94%A8%E5%92%8C%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-12-10T06:34:58.000Z</published>
    <updated>2025-04-08T06:14:49.345Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是微前端"><a href="#什么是微前端" class="headerlink" title="什么是微前端"></a>什么是微前端</h4><p>微前端是多个技术团队通过独立部署单独应用来共同构建应用的一种技术手段。</p><h5 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h5><ul><li>无关技术栈：每一块功能可以使用不同的技术栈去开发、不再对团队的技术栈进行限制和要求</li><li>独立开发、独立部署：每一块功能可以去独立的开发和部署。不需要相互耦合和依赖、可以做到渐进式开发和增量更新</li><li>独立运行时：各个应用间状态隔离不会共享，通信需要主应用进行调度和分配。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是微前端&quot;&gt;&lt;a href=&quot;#什么是微前端&quot; class=&quot;headerlink&quot; title=&quot;什么是微前端&quot;&gt;&lt;/a&gt;什么是微前端&lt;/h4&gt;&lt;p&gt;微前端是多个技术团队通过独立部署单独应用来共同构建应用的一种技术手段。&lt;/p&gt;
&lt;h5 id=&quot;核心特性&quot;&gt;
      
    
    </summary>
    
    
      <category term="js常见问题" scheme="http://webbHou.github.io/categories/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="javascript" scheme="http://webbHou.github.io/tags/javascript/"/>
    
      <category term="微前端" scheme="http://webbHou.github.io/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
